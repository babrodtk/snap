#! /usr/bin/env python3
from collections import OrderedDict
import datetime
import os
import re
import subprocess
import sys

from Snappy.EcMeteorologyCalculator import EcMeteorologyCalculator
from Snappy.Resources import Resources
import xml.etree.ElementTree as ET


def parseIsoTimeDelta(period):
    """parse string like P2DT12H5M to timedelta-objects"""
    regex = re.compile(r'P((?P<days>\d+?)D)?T?((?P<hours>\d+?)H)?((?P<minutes>\d+?)M)?((?P<seconds>\d+?)S)?')
    match = regex.match(period)
    if not match:
        return
    time_params = {}
    for (name, param) in match.groupdict().items():
        if param:
            time_params[name] = int(param)
    return datetime.timedelta(**time_params)

def rimstermGetIsotopes(rimxml):
    """return ordered dictionary of isotopeNames (used by rimsterm) and isotopeIds"""
    isoItems = OrderedDict()
    for itemXML in rimxml.findall("ItemsTot/Item"):
        isoItems[itemXML.attrib['ItemName']] = int(itemXML.attrib['ItemNum'])
    return isoItems

def rimsterm2input(rimxml, argosxml, is_global):
    """create a full snap.input sourceterm from a rimsterm.xml file using the ec-nrpa meteo"""

    sourceTermTemplate = """
SET_RELEASE.POS= P=   {lat},   {lon}
TIME.START= {startTime}
TIME.RUN = {runTime:d}h
STEP.HOUR.OUTPUT.FIELDS= {outputTimestep:d}
"""
    res = Resources()
    lat = rimxml.find("Header/Place/Location/[@Latitude]").attrib['Latitude']
    lon = rimxml.find("Header/Place/Location/[@Longitude]").attrib['Longitude']

    startTime = rimxml.find("TimeOfInitialRelease").text
    runTime = 120
    outputTimestep = 3    
    if argosxml:
        runTime = int(argosxml.find("RunLength").text)
        outputTimestep = int(argosxml.find("OutputTimestep").text)
        if runTime < 0: # backward run
            startTime = argosxml.find("EndTime").text

    startDTime = datetime.datetime.strptime(startTime, '%Y-%m-%dT%H:%M:%SZ')
    snapStartTime="{year} {month} {day} {hour}".format(year=startDTime.year,month=startDTime.month,day=startDTime.day, hour=startDTime.hour)
            
    
    sourceTerm = sourceTermTemplate.format(lat=lat,lon=lon,startTime=snapStartTime, runTime=runTime, outputTimestep=outputTimestep)

    isoItems = rimstermGetIsotopes(rimxml)
    isos = res.getIsotopes()
    releases = []
    for relXML in rimxml.findall("Source/TimeDependent/ReleaseInterval"):
        endtime = parseIsoTimeDelta(relXML.find("SourceTime/[@EndTime]").attrib['EndTime'])
        posXML = relXML.find("SourcePosition")
        lHeight = posXML.attrib['HeightAboveGround']
        uHeight = posXML.attrib['HeightAboveGroundMax']
        if uHeight < lHeight:
            uHeight = lHeight
        isoBqs = {}
        for isoName in isoItems.keys():
            xpath = 'SourceStrength[@ItemName="{}"]'.format(isoName)
            relValXML = relXML.find(xpath)
            if relValXML:
                isoBqs[isoName] = float(relValXML.find('BinStrength').attrib['Value'])
            else:
                isoBqs[isoName] = 0
        releases.append({'endtime': endtime, 'lower': lHeight, 'upper': uHeight, 'isoBqs': isoBqs})

    timevals = ["0"]
    radiusvals = []
    lowervals = []
    uppervals = []
    for rel in releases:
        timevals.append("{:.2f}".format(rel['endtime'].total_seconds()/(60*60)))
        radiusvals.append("50")
        lowervals.append(rel['lower'])
        uppervals.append(rel['upper'])
    radiusvals.append("0")
    lowervals.append("0")
    uppervals.append("0")
    releaseTerm = "TIME.RELEASE.PROFILE.STEPS\n"
    releaseTerm += "MAX.PARTICLES.PER.RELEASE= {:d}\n".format(min(5000, 400*len(isoItems)))
    releaseTerm += "MAX.TOTALPARTICLES= {:d}\n".format(20000000) # rough estimate
    releaseTerm += "RELEASE.HOUR= {}\n".format(", ".join(timevals))
    releaseTerm += "RELEASE.RADIUS.M= {}\n".format(", ".join(radiusvals))
    releaseTerm += "RELEASE.LOWER.M= {}\n".format(", ".join(lowervals))
    releaseTerm += "RELEASE.UPPER.M= {}\n".format(', '.join(uppervals))
    for isoName, isoId in isoItems.items():
        vals = []
        for rel in releases:
            vals.append("{:10.3E}".format(rel['isoBqs'][isoName]))
        vals.append("0")
        vals.append("'{}'".format(isos[isoId]['isotope']))
        releaseTerm += "RELEASE.BQ/SEC.COMP= {}\n".format(','.join(vals))

    sourceTerm += releaseTerm + "\n"

    sourceTerm += res.isotopes2snapinput(isoItems.values())

    metdef = res.getDefaultMetDefinitions('nrpa_ec_0p1')
    if is_global:
        ecmet = EcMeteorologyCalculator(res, startDTime, float(lon), float(lat))
        ecmet.calc()
        if ecmet.must_calc():
            raise Exception("no EC met-files calculated for {}".format(startDTime))
        files = ecmet.get_meteorology_files()
        (metdef["startX"], metdef["startY"]) = ecmet.get_grid_startX_Y()
    else:
        files = res.getECMeteorologyFiles(dtime=startDTime, run_hours=int(runTime))
        if (len(files) == 0):
            raise Exception("no EC met-files found for {}, runtime {}".format(startDTime, runTime))

    sourceTerm += res.getSnapInputMetDefinitions('nrpa_ec_0p1', files, **metdef)

    return sourceTerm

def convert_to_grib(snapNc, basedir, ident, isotopes):
    config = Resources().getGribWriterConfig(isotopes)
    xmlFile = "cdmGribWriterConfig.xml"
    basexmlFile = os.path.join(basedir, xmlFile)
    with open(basexmlFile, 'w') as xh:
        xh.write(config['xml'])
    errlog = open(os.path.join(basedir, "fimex.errlog"), "w")
    outlog = open(os.path.join(basedir, "fimex.outlog"), "w")
    tempfile = 'tmp.grib'
    basetempfile = os.path.join(basedir, tempfile)
    # fimex works in basedir, so it does not need the basefiles
    for appendix, params in config['extracts'].items():
        outFile = os.path.join(basedir, "{ident}_{type}".format(ident=ident, type=appendix))
        with open(outFile, 'wb') as gh:
            for param in params:
                if (os.path.exists(basetempfile)):
                    os.remove(basetempfile)
                procOptions = ['fimex', '--input.file=snap.nc', '--input.config={}'.format(config['ncml']),
                       '--output.file={}'.format(tempfile),
                       '--output.type=grib', '--output.config={}'.format(xmlFile)]
                procOptions.append('--extract.selectVariables={}'.format(param))
                print(" ".join(procOptions))
                proc = subprocess.Popen(procOptions, cwd=basedir, stderr=errlog, stdout=outlog)
                if (proc.wait() != 0):
                    errlog.write("'{fimex}' in {dir} failed".format(fimex=' '.join(procOptions), dir=basedir))
                else:
                    # append tmp-file to final grib-file
                    with (open(basetempfile, 'rb')) as th:
                        while True:
                            data = th.read(16*1024*1024) # read max 16M blocks
                            if data:
                                gh.write(data)
                            else:
                                break
                if (os.path.exists(basetempfile)):
                    os.remove(basetempfile)

    errlog.close()
    outlog.close()

def assertReadTrajLine(line, keyword):
    '''check that the line contains the keyword at the end and return the first characters'''
    if (re.search(keyword, line)):
        return line[0:20]
    raise Exception("trajectory line does not contain {keyword}: {line}".format(keyword=keyword, line=line))

def trajInput2snapInput(trajInput, ident, is_global):
    res = Resources()

    with open(trajInput) as traj:
        name = assertReadTrajLine(traj.readline(), r'Source')
        lat = float(assertReadTrajLine(traj.readline(), r'Latitude'))
        lon = float(assertReadTrajLine(traj.readline(), r'Longitude'))
        sdate = datetime.datetime.strptime(assertReadTrajLine(traj.readline(), r'Start')[0:12],'%Y%m%d%H%M')
        fwbw = assertReadTrajLine(traj.readline(), r'(forward|backward)')
        duration = int(assertReadTrajLine(traj.readline(), r'Simulation'))
        count = int(assertReadTrajLine(traj.readline(), r'Number'))
        heights = []
        for i in range(0, count):
            heights.append(float(assertReadTrajLine(traj.readline(), r'above')))

    sourceTermTemplate = """
SET_RELEASE.POS= P=   {lat},   {lon}
TIME.START= {startTime}
TIME.RUN = {runTime}h

TIME.RELEASE.PROFILE.BOMB
MAX.PARTICLES.PER.RELEASE= 1
MAX.TOTALPARTICLES= 100
RELEASE.SECOND=    0
RELEASE.RADIUS.M=    0.
RELEASE.LOWER.M= 500.
RELEASE.UPPER.M= 500.
RELEASE.BQ/STEP.COMP= 1.0e+20 traj

COMPONENT= traj
DRY.DEP.OFF
WET.DEP.OFF
GRAVITY.OFF
FIELD.IDENTIFICATION=1

"""
    if (re.search(r'backward', fwbw)):
        duration = duration * -1
    snapStartTime="{year} {month} {day} {hour}".format(year=sdate.year,month=sdate.month,day=sdate.day, hour=sdate.hour)
    sourceTerm = sourceTermTemplate.format(lat=lat,lon=lon,startTime=snapStartTime, runTime=duration)

    metdef = res.getDefaultMetDefinitions('nrpa_ec_0p1')
    if is_global:
        ecmet = EcMeteorologyCalculator(res, sdate, float(lon), float(lat))
        ecmet.calc()
        if ecmet.must_calc():
            raise Exception("no EC met-files calculated for {}".format(sdate))
        files = ecmet.get_meteorology_files()
        (metdef["startX"], metdef["startY"]) = ecmet.get_grid_startX_Y()
    else:
        files = res.getECMeteorologyFiles(dtime=sdate, run_hours=int(duration))
        if (len(files) == 0):
            raise Exception("no EC met-files found for {}, runtime {}".format(sdate, duration))
    sourceTerm += res.getSnapInputMetDefinitions('nrpa_ec_0p1', files, **metdef)

    sourceTerm += "{:d}\n".format(count)
    for i in range(0,count):
        sourceTerm += "{:f}\n".format(heights[i])
    for i in range(0,count):
        sourceTerm += "Trajectory_{:03d}_{}.DAT\n".format(i+1, ident)

    return sourceTerm


def snap4traj(trajInput, basedir, ident, is_global):
    '''run snap with traj definition in basedir dir'''

    if (not os.path.isdir(basedir)):
        os.makedirs(basedir)
    snapInput = trajInput2snapInput(trajInput, ident, is_global)
    with open(os.path.join(basedir, "snap.input"), "w") as fh:
        fh.write(snapInput)

    errlog = open(os.path.join(basedir, "snap.errlog"), "a")
    outlog = open(os.path.join(basedir, "snap.outlog"), "a")
    print("bsnap_traj snap.input")
    proc = subprocess.Popen(['bsnap_traj', 'snap.input'], cwd=basedir, stderr=errlog, stdout=outlog)
    if (proc.wait() != 0):
        raise Exception("bsnap_traj in {} failed".format(basedir))
    errlog.close()
    outlog.close()


def snap4rimsterm(rimsterm, argosrequest, basedir, ident, is_global):
    '''run snap with rimsterm definition in basedir dir'''
    tree = ET.parse(rimsterm)
    root = tree.getroot()
    assert root.tag == 'CBRN_Sourceterm', "Not a rimsterm input file: {}".format(rimsterm)

    argosRoot = None
    if argosrequest:
        argosTree = ET.parse(argosrequest)
        argosRoot = argosTree.getroot()
        assert argosRoot.tag == 'Request', "Not a argos request xml file: {}". format(argosrequest)

    if (not os.path.isdir(basedir)):
        os.makedirs(basedir)

    snapInput = rimsterm2input(root, argosRoot, is_global)
    with open(os.path.join(basedir, "snap.input"), "w") as fh:
        fh.write(snapInput)

    errlog = open(os.path.join(basedir, "snap.errlog"), "a")
    outlog = open(os.path.join(basedir, "snap.outlog"), "a")
    print("bsnap_naccident snap.input")
    proc = subprocess.Popen(['bsnap_naccident', 'snap.input'], cwd=basedir, stderr=errlog, stdout=outlog)
    if (proc.wait() != 0):
        raise Exception("bsnap_naccident in {} failed".format(basedir))

    print("snapAddToa snap.nc")
    proc2 = subprocess.Popen(['snapAddToa', 'snap.nc'], cwd=basedir, stderr=errlog, stdout=outlog)
    if (proc2.wait() != 0):
        raise Exception("snapAddToa snap.nc in {} failed".format(basedir))


    errlog.close()
    outlog.close()

    convert_to_grib(os.path.join(basedir,"snap.nc"), basedir, ident, rimstermGetIsotopes(root).values())



if __name__ == "__main__":
    os.umask(0) # make sure files can be deleted later
    import argparse
    parser = argparse.ArgumentParser(description="run snap from a rimsterm.xml file and convert to grib-files named ident_conc, ident_depo ident_wetd ident_dose ident_tofa")
    parser.add_argument("--rimsterm", help="source-term in rimsterm format", required=False)
    parser.add_argument("--argosrequest", help="optional argos-request xml file in addition to --rimsterm file", required=False)
    parser.add_argument("--worldwide", help="use global meteorology", required=False, action="store_true")
    parser.add_argument("--trajInput", help="source-term in nrpa trajectory input format", required=False)
    parser.add_argument("--dir", help="output-directory", required=True)
    parser.add_argument("--ident", help="output-file identifier", required=True)
    args = parser.parse_args()
    if args.rimsterm is not None:
        snap4rimsterm(args.rimsterm, args.argosrequest, args.dir, args.ident, args.worldwide)
    elif args.trajInput is not None:
        snap4traj(args.trajInput, args.dir, args.ident, args.worldwide)
    else:
        print("need one of trajInput or rimsterm options", file=sys.stderr)
