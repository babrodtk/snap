#! /usr/bin/env python3
import xml.etree.ElementTree as ET
import os
import datetime
import re
import subprocess
from Snappy.Resources import Resources


def parseIsoTimeDelta(period):
    """parse string like P2DT12H5M to timedelta-objects"""
    regex = re.compile(r'P((?P<days>\d+?)D)?T?((?P<hours>\d+?)H)?((?P<minutes>\d+?)M)?((?P<seconds>\d+?)S)?')
    match = regex.match(period)
    if not match:
        return
    time_params = {}
    for (name, param) in match.groupdict().items():
        if param:
            time_params[name] = int(param)
    return datetime.timedelta(**time_params)

def rimstermGetIsotopes(rimxml):
    """return dictionary of isotopeNames (used by rimsterm) and isotopeIds"""
    isoItems = {}
    for itemXML in rimxml.findall("ItemsTot/Item"):
        isoItems[itemXML.attrib['ItemName']] = int(itemXML.attrib['ItemNum'])
    return isoItems

def rimsterm2input(rimxml):
    """create a full snap.input sourceterm from a rimsterm.xml file using the ec-nrpa meteo"""

    sourceTermTemplate = """
SET_RELEASE.POS= P=   {lat},   {lon}
TIME.START= {startTime}
TIME.RUN = {runTime}h
"""
    res = Resources()
    lat = rimxml.find("Header/Place/Location/[@Latitude]").attrib['Latitude']
    lon = rimxml.find("Header/Place/Location/[@Longitude]").attrib['Longitude']
    startTime = rimxml.find("TimeOfInitialRelease").text
    startDTime = datetime.datetime.strptime(startTime, '%Y-%m-%dT%H:%M:%SZ')
    snapStartTime="{year} {month} {day} {hour}".format(year=startDTime.year,month=startDTime.month,day=startDTime.day, hour=startDTime.hour)
    runTime = "72"
    sourceTerm = sourceTermTemplate.format(lat=lat,lon=lon,startTime=snapStartTime, runTime=runTime)

    isoItems = rimstermGetIsotopes(rimxml)
    isos = res.getIsotopes()
    releases = []
    for relXML in rimxml.findall("Source/TimeDependent/ReleaseInterval"):
        endtime = parseIsoTimeDelta(relXML.find("SourceTime/[@EndTime]").attrib['EndTime'])
        posXML = relXML.find("SourcePosition")
        lHeight = posXML.attrib['HeightAboveGround']
        uHeight = posXML.attrib['HeightAboveGroundMax']
        if uHeight < lHeight:
            uHeight = lHeight
        isoBqs = {}
        for isoName in isoItems.keys():
            xpath = 'SourceStrength[@ItemName="{}"]'.format(isoName)
            relValXML = relXML.find(xpath)
            if relValXML:
                isoBqs[isoName] = float(relValXML.find('BinStrength').attrib['Value'])
            else:
                isoBqs[isoName] = 0
        releases.append({'endtime': endtime, 'lower': lHeight, 'upper': uHeight, 'isoBqs': isoBqs})

    timevals = ["0"]
    radiusvals = []
    lowervals = []
    uppervals = []
    for rel in releases:
        timevals.append("{:.2f}".format(rel['endtime'].total_seconds()/(60*60)))
        radiusvals.append("50")
        lowervals.append(rel['lower'])
        uppervals.append(rel['upper'])
    radiusvals.append("0")
    lowervals.append("0")
    uppervals.append("0")
    releaseTerm = "RELEASE.HOUR= {}\n".format(", ".join(timevals))
    releaseTerm += "RELEASE.RADIUS.M= {}\n".format(", ".join(radiusvals))
    releaseTerm += "RELEASE.LOWER.M= {}\n".format(", ".join(lowervals))
    releaseTerm += "RELEASE.UPPER.M= {}\n".format(', '.join(uppervals))
    for isoName, isoId in isoItems.items():
        vals = []
        for rel in releases:
            vals.append("{:10.3E}".format(rel['isoBqs'][isoName]))
        vals.append("0")
        vals.append("'{}'".format(isos[isoId]['isotope']))
        releaseTerm += "RELEASE.BQ/SEC.COMP= {}\n".format(','.join(vals))

    sourceTerm += releaseTerm + "\n"

    sourceTerm += res.isotopes2snapinput(isoItems.values())

    meteoTerm = "\n"
    files = res.getECMeteorologyFiles(startDTime, int(runTime))
    if (len(files) == 0):
        raise Exception("no EC met-files found for {}, runtime {}".format(startDTime, runTime))
    for f in files:
        meteoTerm += "FIELD.INPUT={}\n".format(f)

    sourceTerm += meteoTerm
    sourceTerm += res.getSnapInputTemplate('nrpa_ec_0p1')

    return sourceTerm

def convert_to_grib(snapNc, basedir, ident, isotopes):
    config = Resources().getGribWriterConfig(isotopes)
    xmlFile = os.path.join(basedir, "cdmGribWriterCongfig.xml")
    with open(xmlFile, 'w') as xh:
        xh.write(config['xml'])
    errlog = open(os.path.join(basedir, "fimex.errlog"), "w")
    outlog = open(os.path.join(basedir, "fimex.outlog"), "w")
    for appendix, params in config['extracts'].items():
        outFile = os.path.join(basedir, "{ident}_{type}".format(ident=ident, type=appendix))
        procOptions = ['fimex', '--input.file=snap.nc', '--input.config={}'.format(config['ncml']),
                       '--output.file={}'.format(outFile),
                       '--output.type=grib', '--output.config={}'.format(xmlFile)]
        for param in params:
            procOptions.append('--extract.selectVariables={}'.format(param))
        print(" ".join(procOptions))
        proc = subprocess.Popen(procOptions, cwd=basedir, stderr=errlog, stdout=outlog)
        if (proc.wait() != 0):
            raise Exception("'{fimex}' in {dir} failed".format(fimex=' '.join(procOptions), dir=basedir))
    errlog.close()
    outlog.close()


def snap4rimsterm(rimsterm, basedir, ident):
    '''run snap with rimsterm definition in basedir dir'''
    tree = ET.parse(rimsterm)
    root = tree.getroot()
    assert root.tag == 'CBRN_Sourceterm', "Not a rimsterm input file: {}".format(rimsterm)

    if (not os.path.isdir(basedir)):
        os.makedirs(basedir)

    snapInput = rimsterm2input(root)
    with open(os.path.join(basedir, "snap.input"), "w") as fh:
        fh.write(snapInput)

    errlog = open(os.path.join(basedir, "snap.errlog"), "a")
    outlog = open(os.path.join(basedir, "snap.outlog"), "a")
    print("bsnap_naccident snap.input")
#     proc = subprocess.Popen(['bsnap_naccident', 'snap.input'], cwd=basedir, stderr=errlog, stdout=outlog)
#     if (proc.wait() != 0):
#         raise Exception("bsnap_naccident in {} failed".format(basedir))

    print("snapAddToa snap.nc")
    proc2 = subprocess.Popen(['snapAddToa', 'snap.nc'], cwd=basedir, stderr=errlog, stdout=outlog)
    if (proc2.wait() != 0):
        raise Exception("snapAddToa snap.nc in {} failed".format(basedir))


    errlog.close()
    outlog.close()

    convert_to_grib(os.path.join(basedir,"snap.nc"), basedir, ident, rimstermGetIsotopes(root).values())



if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--rimsterm", help="source-term in rimsterm format")
    parser.add_argument("--dir", help="output-directory")
    parser.add_argument("--ident", help="output-file identifier")
    args = parser.parse_args()
    snap4rimsterm(args.rimsterm, args.dir, args.ident)
