%include <Incl_metop.pm> ; #-*-cperl-*-

%manual
###########################################################################
#
# NAME:
#    $SMSHOME/snap/job/snap_run.sms
#
# LINK-NAME:
#    $SMSHOME/snap/job/snap_run_kola.sms
#
# FUNCTION:
#    run SNAP for different possible nuclear accidents
#
# RESPONSIBLE:
#    "Heiko Klein" <heikok>
#
# RESTART:
#    Yes
#
# DESCRIPTION:
#    Run SNAP (severe nuclear accident) program for different 
#    places. The places are defined fint the job-name and the 
#    input-file etc snap_JOBTAG.xml
#
# BUGS:
#
#
# DISTRIBUTION:
#    No
#
# CALLS:
#    fimex
#    bin/snapAccident
#
# CONTROL DATA:
#    $etcdir/setup_JOBNAME.xml
#    $etcdir/snapAccident_input.tmpl
#
# INPUT DATA:
#    SMSDATA/hirlam12/*.dat
#
# OUTPUT DATA:
#    SMSDATA/work/tmp/snap/...
#    SMSDATA/snap/accident12km/netcdf/snap*.nc
#
# CHANGE LOG:
#    (date:originator.name or userid:sms.name or userid: description)
#    2013-01-25:"Heiko Klein" <heikok>:<siris>: first version
#
# ##########################################################################
%end
%nopp

use constant DEBUG => 1;
use DateTime;
use DateTime::Format::Strptime;
use XML::LibXML;
use Template;
use File::Copy qw(copy);
use File::Find qw(find);

my $binSnap  = "bsnapAccident";
my $fimexBin = "fimex";

# variables and functions
our $tmpdir = $workdir.'/snap/';
our $finalDir = "$datadir/accident12/netcdf/";

system ("mkdir", "-p", $tmpdir);
unless (-d $tmpdir) {
    mkdir $tmpdir || &ERROR("Cannot create directory $tmpdir: $!\n");
}
system ("mkdir", "-p", $finalDir);
unless (-d $finalDir) {
    mkdir $finalDir || &ERROR("Cannot create directory $finalDir: $!\n");
}

my $jobName = ($TASK =~ /snap_run_(.*)/) ? $1 : "";
$jobName =~ s/.sms$//;
my $config = "$etcdir/setup_$jobName.xml";
if (! -f $config) {
    &ERROR("Problem: job running with jobName=$jobName, but no config: $config\n");
}

my $cDoc = XML::LibXML->load_xml(location => $config);

my $snapType = $cDoc->find('/snapRun/@type')->get_node(0)->value;
if ($snapType ne "accident") {
    &ERROR("Unknown snap-type: $snapType in $config, currently only 'accident' supported\n");
}

my ($release) = $cDoc->findnodes('/snapRun/releasePosition');
unless ($release) {
    &ERROR("could not find '/snapRun/releasePosition' in $config\n");
}
my %release;
foreach my $attr ($release->attributes) {
    $release{$attr->name} = $attr->value;
}
unless (exists $release{latitude} and exists $release{longitude}
    and exists $release{tag}) {
    &ERROR("could not find '/snapRun/releasePosition' -> {latitude, longitude, tag}\n");
}
my $tag = $release{tag};
my ($timeN) = $cDoc->findnodes('/snapRun/time');
unless ($timeN) {
    &ERROR("Could not find '/snapRun/time' in $config\n");
}
my %time;
foreach my $attr ($timeN->attributes) {
    $time{$attr->name} = $attr->value;
}
unless (exists $time{lengthHours}) {
    &ERROR("Could not find lenghtHours in /snapRun/time in $config\n");
}
my $startTime;
if ($time{start}) {
    my $strp = new DateTime::Format::Strptime(pattern =>'%Y-%m-%d %H',
                                              time_zone => 'UTC',
				              on_error => 'croak');
    $startTime = $strp->parse_datetime($time{start});
} else {
    $startTime = DateTime->now; 
    $startTime->set_hour($utc);
}
my $strp = new DateTime::Format::Strptime(pattern =>'%Y %m %d %H',
                                          time_zone => 'UTC',
					  on_error => 'croak');

my %ttVars = (
RELEASE_LATITUDE => $release{latitude},
RELEASE_LONGITUDE => $release{longitude},
TIME_START => $strp->format_datetime($startTime),
TIME_RUN => $time{lengthHours},
TAG => $release{tag},
TMPDIR => $tmpdir,
);

my $snapInput = "$tmpdir/snap_".$release{tag}.".input";
my $tt = Template->new({INCLUDE_PATH => $etcdir,
                        EVAL_PERL => 0});
$tt->process('snapAccident_input.tmpl', \%ttVars, $snapInput);

# run snap
system($binSnap, $snapInput) == 0 or &ERROR("running '$binSnap $snapInput' failed\n");

# convert output
my $outFile = "snap_$tag.nc";
my $prodFile = $outFile.".gen";
system($fimexBin,'--input.file', "$tmpdir/snap_$tag.felt",
              '--input.config', "$etcdir/felt2nc_snap.xml",
	      '--input.type', "felt",
	      '--output.file', "$tmpdir/$prodFile",
	      '--output.type', "nc4") == 0 or &ERROR("fimex-conversion to netcdf failed");
copy("$tmpdir/$prodFile", $finalDir . $prodFile)
    or &ERROR("cannot copy $tmpdir/$prodFile to $finalDir: $!\n");
rename ($finalDir.$prodFile, $finalDir.$outFile) or &ERROR("cannot rename $finalDir/$prodFile to $outFile");

# cleanup tmpdir
unlink ("$tmpdir/$prodFile");

#==========================================================================
#  End task.
#==========================================================================
&ENDT;
#==========================================================================
#  Clean up and exit
#==========================================================================
&EXIT;
