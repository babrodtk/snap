%include <Incl_metop.pm> ; #-*-cperl-*-

%manual
###########################################################################
#
# NAME:
#    SMSBASE/snap/job/snap.sms
#
# FUNCTION:
#    Run SNAP model when inputfiles exist
#
# RESPONSIBLE:
#    Siri Spjelkavik <siris>
#    Heiko Klein <heikok>
#    Rebecca Rudsar <rebeccar>
#
# RESTART:
#    Yes
#    Won't do anything if the inputfiles are already deleted
#
# DESCRIPTION:
#
#    SNAP = Severe Nuclear Accident Program
#    NRPA = Norwegian Radiation Protection Authority
#           (Statens Straalevern)
#
#    NRPA is the customer.
#
#    Inputfiles to the SNAP model is put at nrpa.met.no by NRPA.
#
#    This SMS job:
#         - Checks whether the inputfiles exists or not
#         - Copies the inputfiles to routine if they exist
#         - The SNAP model is in case started
#         - The results are sent back to the external host(s)
#         - Mail is sent to responsible persons at met.no
#         - Inputfiles at the external host is renamed when the model
#           is done, so that a new simulation can start. There are
#           never more than one copy of an old inputfile at the
#           external host(s).
#         - Inputfiles at routine are renamed to an unique filename.
#           Will be deleted when the file reaches a certain age?
#
#    If the job keeps bombing and you need to remove the failing
#    request, the request must be deleted from /metno/nrpa/upload on
#    nrpa.met.no and /opdata/snap/upload.  It should be something like
#    this:
#
#        ssh sms@routine
#        ssh mitrans@nrpa
#        ls /metno/nrpa/upload
#
#        Find the name of the failing request, it should be something
#        like this:
#
#        Skogbrann1_ARGOS2SNAP.zip
#        rm /metno/nrpa/upload/Skogbrann1_ARGOS2SNAP.zip
#        logout
#
#        Still as sms-user:
#        rm /opdata/snap/upload/Skogbrann1_ARGOS2SNAP.zip
#
#
#    If unable to contact Heiko contact the direct contact points at
#    Statens Straalevern:
#       Jan Erik Dyve 67 16 26 48 (jan.erik.dyve@nrpa.no)
#       Kasra Tazmini 67 16 26 97 (kasra.tazmini@nrpa.no)
#    N.B. Main telephone nr. for Statens Straalevern is 67 16 25 00.
#
# BUGS:
#    Yes.
#
# DISTRIBUTION:
#    Yes
#    sftp is used to send the result to external host(s)
#
# CALLS:
#    SMSBASE/snap/bin/xml2snapinput.pl
#    SMSBASE/snap/bin/bsnap_naccident
#    SMSBASE/snap/bin/bsnap_nbomb
#    SMSBASE/snap/bin/bsnap_traj
#    sftp
#    SECURECOMMAND
#
# CONTROL DATA:
#    SMSBASE/snap/job/Isodata_Radius_DryDepVel.DAT
#
# INPUT DATA:
#    SMSDATA/snap/<ident>_ARGOS2*.zip (copied from external host)
#    SMSDATA/snap/snap.input (made by read_argos.pl)
#
# OUTPUT DATA:
#    SMSDATA/snap/<ident>_MLDP0_depo
#    SMSDATA/snap/<ident>_MLDP0_conc
#    SMSDATA/snap/<ident>_MLDP0_dose
#    SMSDATA/snap/<ident>_hi_res_MLDP02ARGOS.zip (the 3 files above zipped)
#
# CHANGE LOG:
#    2002-12-12::"Kjersti Roekenes" <kjerstir>: Initial version
#    2002-12-17:"Anstein Foss" <ansteinf>:"Kjersti Roekenes" <kjerstir>:
#               Added script to start model. Still testing!
#    2003-02-03::"Kjersti Roekenes" <kjerstir>: Use new version of
#               read_argos.pl (with Getopt::Long)
#    2003-02-26::"Anstein Foss" <ansteinf>: unzip input, zip output
#    2003-03-19::"Kjersti Roekenes" <kjerstir>: Check if the inputfile(s)
#               copied from remote host really exists at local host
#    2003-04-01::"Anstein Foss" <ansteinf>: for NRPA testing, nrpa@nrpa -> atom@lightning
#    2003-05-21::"Anstein Foss" <ansteinf>: more testing...
#    2003-06-10::"Anstein Foss" <ansteinf>: more testing...
#    2003-06-11::"Anstein Foss" <ansteinf>: more testing...
#    2003-06-12::"Anstein Foss" <ansteinf>: more testing...
#    2003-08-22::"Anstein Foss" <ansteinf>: Argos/MLDP0 version, nrpa@nrpa
#    2003-08-27::"Anstein Foss" <ansteinf>: mitrans@nrpa
#    2003-10-21::"Anstein Foss" <ansteinf>: Hirlam.20km, snap.time,...
#    2005-01-31::"Anstein Foss" <ansteinf>: delete some large files after run
#    2006-08-29::"Adrian Phillips" <adrianp>: removed sending mail (Anstein left)
#    2006-11-20::<rebeccar>: sending mail to Jerzy Bartniki
#    2007-05-02::<adrianp>: - fix hard coded path to family (or shared) binaries
#                           - use PATH for finding binaries, if possible (phasing out $(c)bindir)
#    2009-06-22::<arildb>: Updated contact info to NRPA
#    2009-08-21::<arildb>: New virtual server used instead of wind/chill
#    2009-11-25::<arildb>: Now removing old files from server
#    2011-03-10::<siris>: new models and three instead of one
#    2012-05-02::<siris>: updated snap naccident
#    2012-05-09::<siris>: change filename after request form NRPA
#    2012-05-16::<siris>: put the new filenames into zip
#    2012-06-06::<siris>: changes in filename for naccident
#    2012-06-12::<siris>: testing with nrpa
#    2013-03-20::<siris>: new version of input to traj
#    2013-04-08::<heikok>: replace name with run_ident for traj to nrpa.input
#    2013-09-19::<siris>: implement bomb part
#    2013-10-09::<heikok>: no longer required to modify Trajectory filenames
#    2013-10-16::<siris>: a small old fix
#    2013-10-18::<arildb>: Fixed format error in change log
#    2016-06-27::<heikok>: moving put_statusfile and run_model to modules
#
##########################################################################
%end
%nopp

use strict;
use warnings;

use File::Basename;
use File::Copy;

use Time::ParseDate;
use DateTime;
use XML::LibXSLT;
use Template;

use English;

use Snap qw(put_statusfile create_ppi_dir);
use SnapHirlam12 qw();
use SnapEC qw();

use vars qw( $RSHVALUE $RSHERROR );

my %smsdirs = ('data' => $datadir,
               'work' => $workdir,
               'etc' => $etcdir,
               'job' => $jobdir);

my $upload_dir = "$datadir" . "/" . "upload";
my $done_dir   = "$datadir" . "/" . "done";
if ( ! -d $upload_dir ) { mkdir $upload_dir };
if ( ! -d $done_dir )   { mkdir $done_dir };

my (@input_files, @list_files, @list_names);

my $remote_host_alias = 'nrpa.met.no';
my $remote_user = 'nrpa';
my $remote_hosts_and_users = [ { host => "$remote_host_alias",
                 user => "$remote_user",
                 PPIuser => "heikok",
                 PPIbasedirs => [qw(/lustre/storeB/project/fou/kl/snap/nrpa_runs
                                    /lustre/storeA/project/fou/kl/snap/nrpa_runs)] } ];

my $remote_home_directory = '/metno/nrpa';
my $remote_ftp_upload     = '/metno/nrpa/upload';
my $remote_ftp_download   = '/metno/nrpa';

my $send_mail_to = [ 'jerzy.bartnicki@met.no' ];
my $reply_to = 'jerzy.bartnicki@met.no';

my $max_try_number = 2;

my $input_files_not_copied = 1;
my $try_number = 0;

my $sftpinp;

chdir $upload_dir;

# Start with removing all old files from the ftp-server
my $serr = SECURECOMMAND("$remote_host_alias -l $remote_user -n 'find $remote_home_directory/* -maxdepth 0 -mtime +31 -type f | xargs rm -f'");
print "\nReturned value from SECURECOMMAND (RSHVALUE):\n$RSHVALUE\n";
print "\nReturned error from SECURECOMMAND (RSHERROR):\n$RSHERROR\n" ;
die ("Error from SECURECOMMAND\n") if ( $serr );

# Now let's see what's left on the server...

$sftpinp = "sftp.input";

open (SFTPINP,">$sftpinp") or die "OPEN ERROR: $sftpinp";
print SFTPINP ("cd $remote_ftp_upload\ndir\nquit\n");
close(SFTPINP);

open (FLIST, "sftp -b $sftpinp $remote_user\@$remote_host_alias|");

my @tmprequests = <FLIST>;
close (FLIST);

my @requestlines = grep /_ARGOS2.*.zip/, @tmprequests;

chomp @requestlines;

my @requests;

if ( $#requestlines > -1 ) {
  for (my $i=0; $i<=$#requestlines; $i++) {
    my @parts = split(/\s+/,$requestlines[$i]);
    push(@requests,$parts[$#parts]);
  }
}

if ( $#requests > -1 ) {
  foreach my $req ( @requests ) {
    print ("GET REQUEST: $req\n");
  }
  open (SFTPINP,">$sftpinp") or die "OPEN ERROR: $sftpinp";
  print SFTPINP ("cd $remote_ftp_upload\n");
  foreach my $request (@requests) {
    print SFTPINP ("get $request\n");
  }
  print SFTPINP ("quit\n");
  close(SFTPINP);

  system("sftp -b $sftpinp $remote_user\@$remote_host_alias");
}

# NOTE: may find older requests already transfered
unlink "request.list";
system("ls -1t >request.list");

open (RLIST, "request.list") or die "OPEN ERROR: request.list";
@tmprequests = <RLIST>;
close (RLIST);

chomp @tmprequests;
@requests = grep /_ARGOS2.*/, @tmprequests;

if ( $#requests < 0 ) {		# Nothing happens

  print "\nThere was no new input files at $remote_host_alias",
    " so the SNAP-model won't be started.\n\n";

} else {			# The model will be started

  my $zip_file  = $requests[0];
  my ($run_ident, $model) = ($zip_file =~ m[(.*)_ARGOS2(.*)\.zip]);

  print("   zip_file=  $zip_file\n");
  print("   run_ident= $run_ident\n");

  chdir $datadir;

  unlink <*_MLDP0_input>;
  unlink <*_MLDP0_src>;
  unlink <*_MLDP0_iso>;
  unlink <*_MLDP0_status>;
  unlink <*_MLDP0_depo>;
  unlink <*_MLDP0_conc>;
  unlink <*_MLDP0_dose>;

  copy("$upload_dir/$zip_file", "$zip_file");

  push(@input_files, $zip_file);

  system( "unzip -o $zip_file" ) == 0
    or die( "\nProblems with unzip -o $zip_file\n\n" );

  print "\nThe input files @input_files was copied from $remote_host_alias. The SNAP-model will be started.\n\n";

  my $mail_msg = "SNAP starting run...\n";
#  send_mail( $send_mail_to, $reply_to, $mail_msg );

  # The model is started right  here!
  my ( $error, @output_files );
  if (substr($run_ident,0,4) eq "EC01") {
      # run the ec-model on the PPI machines
      $ppiHost = GET_PPI_LOGIN_HOST($remote_hosts_and_users->[0]{'PPIuser'}) or die "cannot GET_PPI_LOGIN_HOST() with user ".$remote_hosts_and_users->[0]{'PPIuser'}."\n";
      $remote_hosts_and_users[0]{PPIhost} = $ppiHost;
      my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);
      $year+=1900; $mon++;
      my $dateStr = sprintf("%04d-%02d-%02T%02%02%02", $year, $mon, $mday, $hour, $min, $sec);
      $ppiDir = create_ppi_dir($remote_hosts_and_users, [map {$_ . '/' . $dateStr} @{ $remote_hosts_and_users{'PPIbasedirs'} } ]);
      $remote_hosts_and_users[0]{PPIdir} = $ppiDir;
      ( $error, @output_files ) = SnapEC::run_model( \%smsdirs, $remote_hosts_and_users,
                        $remote_ftp_download,
                        $run_ident, $model );
  } else {
    ( $error, @output_files ) = SnapHirlam12::run_model( \%smsdirs, $remote_hosts_and_users,
                        $remote_ftp_download,
                        $run_ident, $model );
  }
  archive_inputfiles( $remote_user, $remote_host_alias,
              $remote_ftp_upload, $upload_dir, $done_dir,
              @input_files );

  if ( $error ) {

    put_statusfile( \%smsdirs, $remote_hosts_and_users, $remote_ftp_download,
            $run_ident, $model, 409 );

    my $error_message = "Problems while running SNAP!\n";
    send_mail( $send_mail_to, $reply_to, $error_message );

    print "$error_message";

  } else {

    put_resultfiles( $remote_hosts_and_users, $remote_ftp_download,
             @output_files );

    put_statusfile( \%smsdirs, $remote_hosts_and_users, $remote_ftp_download,
            $run_ident, $model, 202 );

    print "SNAP finished. Everything OK!\n";
  }
}

# Create input file to snap using template toolkit:
sub create_tt_input {
  my ($snapinput, $tmp, $ttfile) = @_;

  print qq[Try to create $snapinput with $ttfile];

  my $template = Template->new( {ABSOLUTE => 1} );
  $template->process($ttfile, $tmp, $snapinput)
    or WARNING $template->error() && return 409;

  return 0;
}

sub put_resultfiles {

    my ( $remote_hosts_and_users, $remote_ftp_dir, @resultfiles ) = @_;

    print "\nput_resultfiles\n\n";

    my $sftpinp = "sftp.input";
    open (SFTPINP,">$sftpinp") or die "OPEN ERROR: $sftpinp";
    print SFTPINP ("cd $remote_ftp_dir\n");
    foreach my $resultfile (@resultfiles) { print SFTPINP ("put $resultfile\n"); }
    print SFTPINP ("quit\n");
    close(SFTPINP);

    # Send result to remote host (both)
    foreach my $dest ( @{$remote_hosts_and_users} ) {
    system("sftp -b $sftpinp $dest->{user}\@$dest->{host}");
    }

}


sub archive_inputfiles {

    my ( $user, $host, $rem_from_dir, $upload_dir, $done_dir, @input_files ) = @_;

    print "\narchive_inputfiles\n\n";

    # Create timestring used in filenames for archived inputfiles
    my ( $min, $hour, $mday, $mon, $year ) = ( gmtime() )[1,2,3,4,5];
    $year += 1900;
    $mon += 1;
    $min =~ s/^(\d)$/0$1/;
    $hour =~ s/^(\d)$/0$1/;
    $mday =~ s/^(\d)$/0$1/;
    $mon =~ s/^(\d)$/0$1/;
    my $timestring = "${year}${mon}${mday}${hour}${min}";

    my $sftpinp = "sftp.input";

    open (SFTPINP,">$sftpinp") or die "OPEN ERROR: $sftpinp";
    print SFTPINP ("cd $rem_from_dir\ndir\n");
    foreach my $input_file ( @input_files ) { print SFTPINP ("rm $input_file\n"); }
    print SFTPINP ("quit\n");
    close(SFTPINP);

    system("sftp -b $sftpinp $user\@$host");

    foreach my $input_file ( @input_files ) {

    # Rename inputfiles at localhost,
    # give a unique filename containing date

    my $input_file_with_timestamp = $input_file . '_' . $timestring;

    rename ("$upload_dir/$input_file", "$done_dir/$input_file_with_timestamp");
    }

}


sub send_mail {

    my ( $mail_list, $reply_to, $msg, @other_attachments ) = @_;

    my $sendwithmail_prog = "$ENV{BINDIR}/sendwithmail";
    my $mail_msg_file = "$datadir/mail_message";

    open( ERRORMAIL, ">$mail_msg_file" )
        or die( "Failed to open $mail_msg_file: $!\n" );
    print ERRORMAIL "$msg\n";
    close( ERRORMAIL ) or die( "Failed to close $mail_msg_file: $!\n" );

    foreach my $person ( @{$mail_list} ) {

    print "Sending mail to $person\n";
    system( "$sendwithmail_prog $person $reply_to $mail_msg_file @other_attachments" ) == 0
      or warn( "Failed to send mail to $person\n" );

    }

}

# lines like this:
# value                        explanation
# extract value, might be leading whitespace!
# lines like this:
# value                        explanation
# extract value, might be leading whitespace!
sub extract_info {
    my ($vars, $ih) = @_;

    my @parcels;
    while (my $line = <$ih>) {
    my ($value, $desc) = split m[\s\s+], $line;
    $value = strip( $value );
    $desc = lc(strip( $desc ));

    $desc = 'starttime' if ( $desc =~ m[start]i);
    $desc = 'num_parcel' if ( $desc =~ m[number.*parcels]i);
    $desc = 'latitude' if ( $desc =~ m[latitude]i );
    $desc = 'longitude' if ( $desc =~ m[longitude]i );

    if ($desc =~ m[ parcel ]) {
        push @parcels, $value;
        next;
    }

    $vars->{$desc} = $value;

    }

    if (scalar(@parcels) > 0) {
    $vars->{'parcels'} = \@parcels;
    }

    return 1;
}

sub strip {
    my ($a) = @_;

    $a =~ s!\A\s*!!;
    $a =~ s!\s*\z!!;

    return $a;
}


#==========================================================================
#  End task.
#==========================================================================
&ENDT;
#==========================================================================
#  Clean up and exit
#==========================================================================
&EXIT;
