#!/bin/ksh
#
# A script to create make dependencies
# for compilation of external distribution of ODB-software
#
# Author: Sami Saarinen, ECMWF, 08-Dec-2003 : Initial version
#                               06-Feb-2004 : Handling of extras/mpi_serial
#                               19-Feb-2004 : Support for obstat (but not satmon yet)
#                               26-Feb-2004 : Handling of extras/emos & extras/ec
#                               04-Nov-2004 : Dr.Hook into libdrhook
#                               17-Feb-2005 : cksum (crc32) and cmpl_binding added to distribution
#                               15-Apr-2005 : An alternate make= checked for from make.$(ARCH)
#                               12-May-2005 : gribtrace,gribdiff,splitgrib & aaobppro libifsaux.a => libodbmain.a
#                               12-May-2005 : Support for Buta.F (TXT-bufr_tables => BIN-bufr_tables conversion)
#                               18-May-2005 : bpar.h is now taken from odb/include (for libemos)
#                               19-May-2005 : alias-defs for cd,rm,cp & ln commands added (to override users 'alias -x' defs)
#                               02-Jun-2005 : read_obstatlog & obstat => libodbmain.a
#                               19-Jul-2005 : Made yacc.o depend explicitly on defs.h (not defs.ok; recursion)
#                               26-Aug-2005 : Started to get rid of references to obsproc & obsort
#                               13-Dec-2005 : Support for Intel tracebackqq(...) via intel_trbk() in Dr.Hook (via -DINTEL)
#                               14-Dec-2005 : Moved addrdiff.c from libifsaux to libdrhook-side
#                               02-Jan-2006 : SQL-files name.sql now refer to $ODBASE_name.o, not name.o
#                               04-Jan-2006 : New file endian.c assigned to libdrhook.a
#                               27-Jan-2006 : CY30R2 aware
#                               15-Mar-2006 : Accomodating MPL_GETARG
#                               16-Mar-2006 : All MPL-codes into libdrhook.a
#                               21-Mar-2006 : support/endian.c needs to be excluded from libifsaux.a
#                               10-Apr-2006 : Introduce libifs.a and do not create libdrhook.a (moved to libifsaux.a)
#                               12-Apr-2006 : libemos/-ec changed to libodbemos/-odbec to avoid potential conflict
#                               25-Apr-2006 : abor1 & yomlun_ifsaux to libdrhook
#                               05-May-2006 : libodbdummy is also created for Dr.Hook
#                               10-Jul-2006 : Added TIMESTAMP_DIR
#                               14-Jul-2006 : ODB/SQL for back-end
#                               14-Aug-2006 : Fixing some ODB/SQL back-end related problems
#                               06-Sep-2006 : Added ../ddl/include and removed ../../ifsaux/include from libodbsqlcompiler VPATH
#                               18-Sep-2006 : libssa added to the build-suite
#                               21-Nov-2006 : Changed echo '\\' to echo '\' since some ksh's still print TWO \:s (thanks to Sandor K.)
#

set -eu

thisdir=$(pwd)

alias cd='\cd'
alias rm='\rm'
alias cp='\cp'
alias ls='\ls'
alias ln='\ln'
alias mv='\mv'

USAGE_1="make_depend [-a arch] [-d dbname] [-D] [-l libname] [-r rootdir]"
USAGE_2="            [-u(ppercase_module_names)] [-m module_extension]"
USAGE_3="            [-g(et_dirs_only)] [-d just_one_dbname]"
USAGE_4="            [-g(et_dirs_only)] [-l just_one_libname] [-A]"

DBs="CCMA ECMA ECMASCR PREODB"
Libs="ifs ifsaux mpi_serial odbemos odbec odb odbsqlcompiler odbsqlbecompiler odbdummy odbport odbmain obstat ssa"
RootDir=$(\cd $(dirname $0) >/dev/null 2>&1; \cd ../../ >/dev/null 2>&1; pwd)
Verbose=""

nodb=0
dbs=""
libs=""
rootdir=""
verbose=0
arch=${ARCH:=notdef}
upcase=""
mod_ext=mod
genmake=genmake

errflg=0
while getopts a:d:Dgl:m:r:uv  option
do
  case $option in
    a) arch=$OPTARG;;
    d) dbs="$dbs$OPTARG ";;
    D) nodb=1;;
    g) genmake=gendirs; dbs=""; libs="";;
    l) libs="$libs$OPTARG ";;
    m) mod_ext=$OPTARG;;
    r) rootdir=$OPTARG;;
    v) verbose=1;;
    u) upcase="-u";;
    *) errflg=1;;
  esac
done

#=======================================================================
#   Replace parameters
#=======================================================================

if [[ "$genmake" = genmake ]] ; then 
  [[ "$dbs"     = "" ]] || DBs=$dbs
  [[ "$libs"    = "" ]] || Libs=$libs
else
  DBs=$dbs
  Libs=$libs
fi
[[ "$rootdir" = "" ]] || RootDir=$rootdir
[[  $verbose -eq 0 ]] || Verbose="v"
[[  $nodb    -eq 0 ]] || DBs=""

DBs=$(echo $DBs | perl -pe 'tr/a-z/A-Z/; s/[_-]//g;')
Libs=$(echo $Libs | perl -pe 's/\blib//g;')

#=======================================================================
#   Show parameters
#=======================================================================

echo "make_depend -a $arch -r $RootDir $upcase -m $mod_ext \\" >&2
tmp=""
for db in $DBs
do
  tmp="${tmp}-d $db "
done
echo "            $tmp \\" >&2
tmp=""
for lib in $Libs
do
  tmp="${tmp}-l $lib "
done
echo "            $tmp" >&2

#=======================================================================
#   Check errors
#=======================================================================

[[ -d $RootDir ]] || {
  echo "***Error: RootDir=$RootDir doesn't exist" >&2
  errflg=1
}

for db in $DBs
do
  [[ -d $RootDir/odb/ddl.$db ]] || {
    echo "***Warning: Database dir $RootDir/odb/ddl.$db doesn't exist" >&2
  }
done

[[ $arch != notdef ]] || {
  echo "***Error: Unrecognized arch. Supply via -a option" >&2
  errflg=1
}

if [[ $errflg -ne 0 ]] ; then
  echo $USAGE_1 >&2
  echo $USAGE_2 >&2
  echo $USAGE_3 >&2
  echo $USAGE_4 >&2
  exit 1
fi

#=======================================================================
#-- functions --
#=======================================================================

function zaazaajinks { # links
  rm -f $(basename $makearch) $(basename $makextra)
  rm -f $(basename $makefile) $(basename $makerootdir)
  rm -f $(basename $makeall)
  ln -s $makearch $makextra $makefile $makerootdir $makeall .
}

function gendirs {
  typeset proj=$1
  typeset task=$2
  typeset odb_filter=$3
  typeset vpath=$4
  typeset files=$5
  typeset dirs=$6 # preserves the directory order
  echo "$dirs"
  exit 0 # just one at a time
}

function genmake {
  typeset proj=$1
  typeset task=$2
  typeset odb_filter=$3
  typeset vpath=$4
  typeset files=$5
  typeset dirs=$6 # preserves the directory order
  typeset exclfiles=$7 # files to be excluded
  typeset lib=lib$task
  typeset incl=$(echo $vpath | perl -pe 's/(\S+)/-I $1/g')
  vpath=$(echo $vpath | perl -pe 's#(\.\./)(\S+)#\$(ROOTDIR)/'$proj'/$2 $1$2#g;')
  if [[ $target = @(solaris) ]] ; then
    # on some systems -I option does not locate F90 module files, but -M is also needed
    typeset inclv=$(echo $vpath | perl -pe 's/(\S+)/-I$1/g')
    typeset inclm=$(echo $vpath | perl -pe 's/(\S+)/-M$1/g')
  else
    typeset inclv=$(echo $vpath | perl -pe 's/(\S+)/-I$1/g')
    typeset inclm=""
  fi
  vpath=$(echo $vpath | perl -pe 's/\s+/:/g; s/:$//;')
  cd $RootDir/$proj
  zaazaajinks
  typeset makedep_master=$RootDir/$proj/make.dep.$task
  cat /dev/null > $makedep_master
  echo "OBJS=" | perl -pe 's/\n//g' >> $makedep_master # Note: newline stripped (echo -n N/A always)
  typeset makedep=make.dep.$task
  cd $RootDir/$proj
  typeset tmpfile=$(pwd)/tmpfile.$$
  if [[ "$exclfiles" = "" ]] ; then
    echo $files | xargs ls -C1 > $tmpfile
  else
    typeset tmpfile1=$tmpfile.1
    typeset tmpfile2=$tmpfile.2
    echo $files     | xargs ls -C1 | sort -u > $tmpfile1
    echo $exclfiles | xargs ls -C1 | sort -u > $tmpfile2
    diff $tmpfile1 $tmpfile2 | grep '< ' | sed 's/^< //' > $tmpfile
    rm -f $tmpfile1 $tmpfile2
  fi
  typeset d
  for d in $dirs
  do
    if [[ -d $RootDir/$proj/$d ]] ; then
      cd $RootDir/$proj/$d
      pwd
      cat $tmpfile | egrep "^$d/" | sort -u |\
          perl -pe 's#(^.*/)(\w+\.sql)#$1$2\n$1\$(ODBASE)_$2#' |\
	  perl -pe 's#(^.*/\w+)\.\w+#$1#' |\
          awk '{printf(" \\\n%s.o", $1);}' >> $makedep_master
      cat /dev/null > $makedep
      echo "TASK=$task"             >> $makedep
      echo "LIB=\$(ROOTDIR)/$lib.a" >> $makedep
      echo "VPATH=$vpath"           >> $makedep
      echo "CCINC=$inclv"           >> $makedep
      echo 'FCINC=$(CCINC)'" $inclm">> $makedep
      echo "ODB_FILTER=$odb_filter" >> $makedep
      echo "OBJS=" | perl -pe 's/\n//g' >> $makedep # Note: newline stripped ('echo -n' not always available)
      files=$(cat $tmpfile | egrep "^$d/" | perl -pe 's#^.*/(\w+\.\w+)$#$1#' | sort -u)
      ls -C1 $files | uniq |\
	  perl -pe 's#(^.*\.sql)#$1#' |\
	  sed 's/\..*//;' | awk '{printf(" \\\n%s.o", $1);}' >> $makedep
      echo " " >> $makedep
      if [[ $odb_filter = no ]] ; then
        if [[ $task = @(odbsql*compiler) ]] ; then # rename
	  typeset ylf  # yacc-lex-files
          for ylf in y.tab.h yacc.o lex.o yacc.c lex.c
	  do
            [[ ! -f $ylf ]] || mv $ylf ${ylf}_
	  done
        fi
        cat /dev/null > $makedep.$$
        perl $sfmakedepend -f $makedep.$$ $upcase -m $mod_ext $incl -- $files
        cat $makedep.$$ \
	  | perl -pe 's/\.h/.ok/g; s#(\s+)\./+#$1#g;' \
	  | perl -pe 's/^.*\.'"${mod_ext}"':.*$//; s/\.'"${mod_ext}"'\b/.o/g;' \
	  | perl -pe 's/\.(y|l)\.o/.o/; s/^(yacc\.o\s*)(:.*)\bdefs\.ok\s*(.*)/$1$2$3 defs.h/;' \
	  | perl -pe 's/^\S+\.o:\s*$//;' \
	  | uniq >> $makedep
        if [[ $task = @(odbsql*compiler) ]] ; then # restore i.e. rename back
	  typeset ylf  # yacc-lex-files
          for ylf in y.tab.h yacc.o lex.o yacc.c lex.c
	  do
            [[ ! -f ${ylf}_ ]] || mv ${ylf}_ $ylf
	  done
        fi
      else # i.e. odb_filter is yes
       typeset odbsql
       echo "\$(ODBASE).o: \$(ODBASE).ddl_" >> $makedep
       files=$(ls -C1 [a-z]*.h | perl -pe 's/\.h/.ok/g; s/\n/ /g;')
       echo "\$(ODBASE).ddl_: \$(ODBSQL) \$(ODBSQLBE) \$(ODBASE).ddl $files" >> $makedep
       echo '	@if [[ ! -f $*.ddl_ ]] || [[ $(ODBSQL) -nt $*.ddl_ ]] || [[ $(ODBSQLBE) -nt $*.ddl_ ]] || \' >> $makedep
       for ok in $(ls -C1 [a-z]*.h | perl -pe 's/\.h/.ok/g')
         do
          echo '	    [[ '$ok' -nt $*.ddl_ ]] || \' >> $makedep
         done
       echo '	    [[ ! -f $*.c    ]] || [[ ! -f $*.h    ]] ; then \' >> $makedep
       echo '	  echo "$(ODB_COMPILE_DDL) $(ODBASE).ddl"; \' >> $makedep
       echo '	        $(ODB_COMPILE_DDL) $(ODBASE).ddl ; \' >> $makedep
       echo '	fi' >> $makedep
       ls -C1 *.sql | perl -pe 's#(^.*)\.sql#$1.o \$(ODBASE)_$1.o: $1.sql \$(ODBASE).ddl_#;' >> $makedep
      fi
      #-- .ok's
      cat /dev/null > $makedep.$$
      typeset ok
      for ok in $(egrep ':' $makedep | \
                  perl -pe 's/^\s+.*://; s/\s+/\n/g;' | \
                  perl -ne 'if (m/^(\S+)\.ok\b/) { print "$1\n"; }' | sort -u)
      do
        echo "$ok.ok: $ok.h" | \
             perl -pe 's/^(defs\.ok: defs\.h)/$1 yacc.o/' \
             >> $makedep.$$
#             perl -pe 's/^(defs\.ok: defs\.h)/y.tab.h: yacc.o\n$1 y.tab.h/'
#        echo "\ttouch $ok.ok" >> $makedep.$$
      done
      cat $makedep.$$ >> $makedep
      rm -f $makedep.*
      echo "Dependencies have been created into $RootDir/$proj/$d/$makedep" >&2
      zaazaajinks
    fi
  done
  echo " " >> $makedep_master
  rm -f $tmpfile
}

function libdrhook { 
  typeset proj=ifsaux
  typeset task=drhook
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../include ../module"
  typeset files="module/*.F90 support/*.c support/*.F90"
          files="$files utilities/*.c utilities/*.F90"
  typeset dirs="module support utilities"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

function libifs {
  typeset proj=ifs
  typeset lib=lib$proj
  echo "Creating dependency files for compilation of project=$proj, library=$lib ..." >&2
  typeset vpath="../../AUTO_INTFB"
          vpath="$vpath ../common ../module"
          vpath="$vpath ../../ifsaux/include ../../ifsaux/module"
          vpath="$vpath ../../odb/interface"
  typeset files="module/*.F90 setup/*.F90"
  typeset dirs="module setup"
  typeset exclfiles=""
  $genmake $proj $proj no "$vpath" "$files" "$dirs" "$exclfiles"
}

function libifsaux {
  typeset proj=ifsaux
  typeset lib=lib$proj
  echo "Creating dependency files for compilation of project=$proj, library=$lib ..." >&2
  typeset vpath="../../AUTO_INTFB"
          vpath="$vpath ../include ../module"
          vpath="$vpath ../../odb/interface"
  typeset files="module/*.F90 support/*.c support/*.F90"
          files="$files utilities/*.c utilities/*.F utilities/*.F90 grib_io/*.F support/*.F"
  typeset dirs="module support utilities grib_io"
  $genmake $proj $proj no "$vpath" "$files" "$dirs" ""
}

function libodbsqlcompiler {
  typeset proj=odb
  typeset task=odbsqlcompiler
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../include ../ddl"
  typeset files="compiler/*.l compiler/*.y compiler/*.c"
  typeset dirs="compiler"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

function libodbsqlbecompiler {
  typeset bedir=backend_compiler
  typeset proj=odb
  typeset task=odbsqlbecompiler
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  if [[ "$genmake" = genmake ]] ; then
    typeset curdir=$(pwd)
    cd $RootDir/$proj
    if [[ -d $bedir ]] ; then
      rm -rf $bedir
    fi
    mkdir $bedir
    cd $bedir
    ln -s ../compiler/yacc.y ../compiler/lex.l ../compiler/*.h ../compiler/*.c .
    rm -f yacc.c lex.c lex.yy.c y.tab.c y.tab.h
    cd $curdir
  fi  
  typeset vpath="../include ../ddl"
  typeset files="$bedir/*.l $bedir/*.y $bedir/*.c"
  typeset dirs="$bedir"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

function libodb {
  typeset proj=odb
  typeset task=$proj
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../../AUTO_INTFB"
          vpath="$vpath ../../ifsaux/include ../../ifsaux/module"
          vpath="$vpath ../../ifs/common ../../ifs/module"
          vpath="$vpath ../include ../module ../interface"
  typeset savedir=$(pwd)
  typeset aux="aux"
  typeset ayx="ayx"
  if [[ $target = @(cygwin) ]] ; then 
    # Special file name "aux" cannot be a file/dir name in Windows/CYGWIN
    aux="ayx"
    ayx="aux"
  fi
  if [[ "$genmake" = genmake ]] ; then 
    if [[ $target != @(cygwin) ]] ; then 
      # Any other Unix : we need to get back to "aux" from tarball's "ayx"
      if [[ -d $RootDir/$proj/$ayx ]] ; then
        cd $RootDir/$proj/$ayx
        [[ -d ../aux ]] || mkdir ../aux
        mv *.F90 *.c ../$aux
        cd $savedir
        rm -rf $RootDir/$proj/$ayx
      fi
    fi
    if [[ -d $RootDir/$proj/compiler ]] ; then
      # In odb/compiler/ -directory make sure that shared code points to files 
      # in aux/ -dir again (non-cygwin), and ayx/ -dir in cygwin
      cd $RootDir/$proj/compiler
      typeset lnk
      for lnk in $(find . -type l -print | xargs ls -l | fgrep "/$ayx/" | awk '{print $(NF-2)}')
      do
        lnk=$(basename $lnk)
        rm -f $lnk
        ln -s ../$aux/$lnk .
      done
      cd $savedir      
    fi
  fi
  typeset files="module/*.F90 lib/[a-z]*.F90 lib/[a-z]*.c"
          files="$files $aux/[a-z]*.F90 $aux/[a-z]*.c" 
  typeset dirs="module lib $aux"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

if [[ $nodb -eq 0 ]] ; then
 function libodbdummy {
  typeset proj=odb
  typeset task=odbdummy
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../../AUTO_INTFB"
          vpath="$vpath ../../ifsaux/include ../../ifsaux/module"
          vpath="$vpath ../../ifs/common ../../ifs/module"
          vpath="$vpath ../include ../module ../interface"
  typeset files="lib/[A-Z]*.F90 lib/[A-Z]*.c"
  typeset dirs="lib"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
 }
else # for libdrhook tarball distribution
 function libodbdummy {
  typeset proj=odb
  typeset task=odbdummy
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath=""
  typeset files="lib/Dummies.c"
  typeset dirs="lib"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
 }
fi

function libodbport {
  typeset proj=odb
  typeset task=odbport
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../../AUTO_INTFB"
          vpath="$vpath ../../ifsaux/include ../../ifsaux/module"
          vpath="$vpath ../../ifs/common ../../ifs/module"
          vpath="$vpath ../include ../module ../interface"
  typeset files="cma2odb/*.F90 bufr2odb/*.F90 preodb/[a-z]*.F90"
  typeset dirs="cma2odb bufr2odb preodb"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

if [[ $nodb -eq 0 ]] ; then
 function libodbmain {
  typeset proj=odb
  typeset task=odbmain
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../../AUTO_INTFB"
          vpath="$vpath ../../ifsaux/include ../../ifsaux/module"
          vpath="$vpath ../../ifs/common ../../ifs/module"
          vpath="$vpath ../include ../module ../interface"
          vpath="$vpath ../../obstat/module"
          vpath="$vpath ../../sub/module ../../sub/interface ../../sub/common ../../sub/namelist"
  typeset files="tools/[A-Z]*.F90 tools/*.c tools/*.F"
          files="$files ../ifsaux/grib_io/gribtrace.F"
          files="$files ../ifsaux/grib_io/gribdiff.F"
          files="$files ../ifsaux/grib_io/splitgrib.F"
          files="$files ../obstat/src/read_obstatlog.F90"
          files="$files ../obstat/src/obstat.F90"
          files="$files ../ssa/sub/ssa.F90"
  typeset dirs="tools ../ifsaux/grib_io ../obstat/src ../ssa/sub"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
 }
else # for libdrhook tarball distribution
 function libodbmain {
  typeset proj=odb
  typeset task=odbmain
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath=""
  typeset files="tools/[A-Z]*.F90 tools/*.c"
  typeset dirs="tools"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
 }
fi

function libmpi_serial { # there is no VOB "mpi_serial", thus treated as if odb's task
  typeset proj=odb
  typeset task=mpi_serial
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath=""
  typeset files="extras/mpi_serial/*.F extras/mpi_serial/*.c"
  typeset dirs="extras/mpi_serial"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

function libodbemos { # there is no VOB "emos", thus treated as if odb's task
  typeset proj=odb
  typeset task=odbemos
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../../ifsaux/include ../../ifsaux/module ../../include ../emos"
  typeset files="extras/emos/*.F extras/emos/*.c extras/gribex/*.F extras/gribex/*.c"
  typeset dirs="extras/emos extras/gribex"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

function libodbec { # there is no VOB "ec", thus treated as if odb's task
  typeset proj=odb
  typeset task=odbec
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../../ifsaux/include ../../ifsaux/module"
  typeset files="extras/ec/*.c extras/ec/*.F"
  typeset dirs="extras/ec"
  $genmake $proj $task no "$vpath" "$files" "$dirs" ""
}

function libobstat {
  typeset proj=obstat
  typeset lib=lib$proj
  echo "Creating dependency files for compilation of project=$proj, library=$lib ..." >&2
  typeset vpath="../../ifsaux/include ../../ifsaux/module"
          vpath="$vpath ../../odb/interface ../../odb/module ../../odb/include"
          vpath="$vpath ../module"
  typeset files="module/*.F90 src/*.F90"
  typeset dirs="module src"
  typeset exclfiles="src/read_obstatlog.F90 src/obstat.F90"
  $genmake $proj $proj no "$vpath" "$files" "$dirs" "$exclfiles"
}

function libssa {
  typeset proj=ssa
  typeset lib=lib$proj
  echo "Creating dependency files for compilation of project=$proj, library=$lib ..." >&2
  typeset vpath="../../ifsaux/include ../../ifsaux/module"
	  vpath="$vpath ../../ifs/module ../../ifs/common"
          vpath="$vpath ../../odb/interface ../../odb/module ../../odb/include"
          vpath="$vpath ../module ../common ../interface ../namelist"
  typeset files="module/*.F90 plot/*.F90 sub/*.F90 util/*.F90"
  typeset dirs="module plot sub util"
  typeset exclfiles="sub/ssa.F90"
  $genmake $proj $proj no "$vpath" "$files" "$dirs" "$exclfiles"
}

function libddl {
  [[ $# -lt 1 ]] && return
  typeset db=$1
  typeset proj=odb
  typeset task=$db
  typeset lib=lib$task
  echo "Creating dependency files for compilation of project=$proj($task), library=$lib ..." >&2
  typeset vpath="../ddl.$db"
  typeset files="ddl.$db/*.ddl ddl.$db/*.sql"
  typeset dirs="ddl.$db"
  $genmake $proj $task yes "$vpath" "$files" "$dirs" ""
}

#=======================================================================
#-- end functions ---
#=======================================================================

cd $RootDir || {
  echo "***Error: Cannot cd to rootdir '$RootDir'" >&2
  exit 1
}

target=unknown
if [[ -d /cygdrive ]] ; then
  target=cygwin
fi

if [[ "$genmake" = genmake ]] ; then
  sfmakedepend=$RootDir/odb/scripts/sfmakedepend
  makearch=$RootDir/odb/scripts/make.$arch
  makextra=$RootDir/odb/scripts/make.extra
  makefile=$RootDir/odb/scripts/makefile
  makerootdir=$RootDir/make.rootdir
  makeall=$RootDir/make.all
  test_arch=$RootDir/odb/scripts/test_arch
  target=$($test_arch)

  echo "Detected test_arch: $target" >&2
  
  [[ -s $makearch ]] || {
    echo "***Error: Architecture depended compiler flag file is empty or not found." >&2
    echo "          Please supply non-empty file '$makearch' to proceed or" >&2
    echo "          check your ARCH variable (check option '-a arch' or ARCH=arch)" >&2
    cd $RootDir/odb/scripts
    echo ">>> You can choose from the following make.<arch> files (in $(pwd))" >&2
    ls make.* >&2
    exit 1
  }

  rm -f $makerootdir
  echo "ROOTDIR=$RootDir"         >  $makerootdir
  echo 'TIMESTAMP_DIR=$(ROOTDIR)' >> $makerootdir
  
  #-- Search for gmake syntax from architecture depended compiler flag file
  rc=0
  egrep '^(ifeq|MAKE=gmake)' $makearch >/dev/null 2>&1 || rc=$?
  if [[ $rc -eq 0 ]] ; then # GNU-make syntax found
    echo "MAKE=gmake" >>   $makerootdir
  else                      # Use regular 'make' unless 'whence gmake' finds the real McCoy
    mccoy=$(whence gmake || echo "")
    if [[ "$mccoy" = "" ]] || [[ ! -x "$mccoy" ]] ; then
      echo "MAKE=make"    >> $makerootdir
    else
      echo "MAKE=$mccoy"  >> $makerootdir
    fi
  fi

  #-- Search for alternate make (if any)
  rc=0
  egrep '^MAKE=' $makearch >/dev/null 2>&1 || rc=$?
  if [[ $rc -eq 0 ]] ; then # Alternate make found
    egrep '^MAKE=' $makearch >> $makerootdir
  fi
  
  #-- Search for ARCH, if any
  rc=0
  egrep "^ARCH=" $makearch >/dev/null 2>&1 || rc=$?
  if [[ $rc -eq 0 ]] ; then # Found
    egrep "^ARCH=" $makearch >> $makerootdir
  fi
  
  #-- Search for SHELL, if any
  rc=0
  egrep "^SHELL=" $makearch >/dev/null 2>&1 || rc=$?
  if [[ $rc -eq 0 ]] ; then # Found
    egrep "^SHELL=" $makearch >> $makerootdir
  fi
  
  #-- Search for INSTALL_DIR, if any
  rc=0
  egrep "^INSTALL_DIR=" $makearch >/dev/null 2>&1 || rc=$?
  if [[ $rc -eq 0 ]] ; then # Found
    egrep "^INSTALL_DIR=" $makearch >> $makerootdir
  fi
  
  #-- Search for MODUPCASE and MOD_EXT, if any
  rc=0
  egrep "^(MODUPCASE|MOD_EXT)=" $makearch >/dev/null 2>&1 || rc=$?
  if [[ $rc -eq 0 ]] ; then # Found
    egrep "^(MODUPCASE|MOD_EXT)=" $makearch >> $makerootdir
  fi

  if [[ $nodb -eq 1 ]] ; then  
    echo "NODB=-D" >> $makerootdir
  fi

  if [[ $target = @(cygwin) ]] ; then
    # to prevent MS/Windows' .exe suffix to appear
    # DX stands for 'dot exe' i.e. .exe
    echo "DX=." >> $makerootdir
    # cygwin hasn't got /lib/cpp, but /usr/bin/cpp
    typeset cpp=$(whence cpp 2>/dev/null || echo "")
    if [[ "$cpp" != "" && -x "$cpp" ]] ; then
      echo "CPP=$cpp -P -C" >> $makerootdir
    else
      echo "***Warning: Problem finding C-preprocessor (cpp) -- using '/lib/cpp'" >&2
      echo "CPP=/lib/cpp -P -C" >> $makerootdir
    fi
  fi

  #rm -f $(basename $makextra)
  #ln -s $makextra .
  
  #-- Make sure the top level $makearch stays empty
  #   so that we have a chance to change $(MAKE) from make to gmake on some systems
  #wrong ??
  #rm -f $(basename $makearch)
  #cat /dev/null > $(basename $makearch)
fi # if [[ "$genmake" = genmake ]] ; then ...

for func in $Libs
do
  eval lib$func || echo "***Warning: Function lib$func not defined" >&2
done

for func in $DBs
do
  libddl $func || :
done

#=======================================================================

exit 0

#=======================================================================

