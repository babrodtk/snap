#!/bin/ksh
pid=0

function kill_bill {
  [[ $pid -eq 0 ]] || {
    kill $pid &
    pid2=$!
    sleep 3
    kill -9 $pid $pid2
  }
}

trap 'echo "Received signal, aborting ..."; kill_bill; exit 1' 1 2 3 15 

#
# A script to create a self-contained tarball (odb*.tar.gz)
# of ODB-software for external distribution
#
# Author: Sami Saarinen, ECMWF, 04-Dec-2003 : Initial version (CY28)
#                               09-Jan-2004 : Preliminary CY28R1
#                               06-Feb-2004 : Handling of extras/mpi_serial
#                               19-Feb-2004 : Support for obstat (but not satmon yet)
#                               26-Feb-2004 : Handling of extras/emos & extras/emos
#                               08-Mar-2004 : Include automatic interface blocks (ifs)
#                               29-Sep-2004 : Got rid of *.contrib* -files
#                               19-Oct-2004 : Memory utilities (getstatm) for LINUX
#                               04-Nov-2004 : Include f90_unix_*.F90 [pseudo]modules in ifsaux (NAG)
#                               04-Nov-2004 : Separate sources for Dr.Hook
#                               24-Jan-2005 : Added yomabrt.F90 for ifsaux
#                               17-Feb-2005 : cksum (crc32) and cmpl_binding added to distribution
#                               12-May-2005 : Support for Buta.F (TXT-bufr_tables => BIN-bufr_tables conversion)
#                               19-May-2005 : alias-defs for cd,rm,cp & ln commands added (to override users 'alias -x' defs)
#                               01-Jun-2005 : Upgraded to CY29R2
#                               26-Aug-2005 : Started to get rid of references to obsproc & obsort
#                               26-Sep-2005 : Upgraded to CY30R1 (and added sdl_module.F90 to source file list)
#                               04-Oct-2005 : Added missing file ifsaux/support/clock.F
#                               13-Dec-2005 : Support for Intel tracebackqq(...) via intel_trbk() in Dr.Hook (via -DINTEL)
#                               14-Dec-2005 : Moved addrdiff.c from libifsaux to libdrhook-side
#                               04-Jan-2006 : New file endian.c assigned to libdrhook.a
#                               27-Jan-2006 : CY30R2 aware + yomancs + yomrstbias
#                               21-Feb-2006 : Fiddling with the Cycle & TarFile. sleep set from 5 to 2 secs at the end.
#                               15-Mar-2006 : Accomodating MPL_GETARG
#                               16-Mar-2006 : All MPL-codes into libdrhook.a
#                               10-Apr-2006 : Introduce libifs.a and do not create libdrhook.a (moved to libifsaux.a)
#                               10-Apr-2006 : AUTO_INTFB environment variable
#                               10-Apr-2006 : The required auto-generated interface blocks picked up automatically
#                               12-Apr-2006 : libemos/-ec changed to libodbemos/-odbec to avoid potential conflict
#                               25-Apr-2006 : Using abor1 from ifsaux & yomlun_ifsaux
#                               27-Apr-2006 : Added cargs.c/.h
#                               28-Apr-2006 : Added linuxtrbk.c 
#                               06-May-2006 : AUTO_INTFB can now be a colon (:) separated path 
#                               06-Jun-2006 : Fiddling with abor1.intfb.h and AUTO_INTFB
#                               06-Jul-2006 : Working with CY31R1 proper; added yom_ygfl.F90 & type_gfls.F90
#                               10-Jul-2006 : timestamp.x fiddle & removal of *~, too, from distribution
#                               10-Jul-2006 : Added support for BoM's mpi4to8-stuff
#                               07-Aug-2006 : Added John Hague's HPCE-mods (bind)
#                               11-Sep-2006 : Removed John Hague's HPCE-mods (bind)
#                               18-Sep-2006 : libssa added to the build-suite
#                               18-Sep-2006 : Added many new files into odb/extras/gribex/ directory
#                               20-Dec-2006 : Blacklist library+compiler added to the source code
#

set -eu

thisdir=$(pwd)

alias cd='\cd'
alias rm='\rm'
alias cp='\cp'
alias ls='\ls'
alias ln='\ln'
alias mv='\mv'

TABLE_OF_CONTENTS="$thisdir/../TABLE_OF_CONTENTS"
cat /dev/null > $TABLE_OF_CONTENTS
tail -f $TABLE_OF_CONTENTS &
pid=$!
exec >$TABLE_OF_CONTENTS 2>&1

echo "*** The ODB distribution tarball creator started on $(date)"

export SCRATCH=${SCRATCH:=/tmp}
[[ -d $SCRATCH ]] || mkdir -p $SCRATCH

USAGE="make_tarball [-c cycle] [-d dbname] [-f tarfile] [-l libname] [-r rootdir]"

Cycle=CY30R2
DBs="PREODB CCMA ECMA ECMASCR"
Libs="ifsaux ifs odbsqlcompiler odb odbdummy odbmain odbport obstat ssa mpi_serial odbemos odbec scripts bl"
#RootDir=/ccvobs
RootDir=$(\cd ../.. >/dev/null 2>&1; pwd)
Verbose=""

cycle=""
dbs=""
libs=""
rootdir=""
tarfile=""
verbose=0

errflg=0
while getopts c:d:f:l:r:v  option
do
  case $option in
    c) cycle=$OPTARG;;
    d) dbs="$dbs$OPTARG ";;
    f) tarfile=$OPTARG;;
    l) libs="$libs$OPTARG ";;
    r) rootdir=$OPTARG;;
    v) verbose=1;;
    *) errflg=1;;
  esac
done

#=======================================================================
#   Replace parameters
#=======================================================================

[[ "$cycle"   = "" ]] || Cycle=$cycle
[[ "$dbs"     = "" ]] || DBs=$dbs
if [[ "$tarfile" = "" ]] ; then
  TarFile=\$SCRATCH/odb_\$Cycle.tar
else
  TarFile=$tarfile
fi
[[ "$libs"    = "" ]] || Libs=$libs
[[ "$rootdir" = "" ]] || RootDir=$rootdir
[[  $verbose -eq 0 ]] || Verbose="v"

DBs=$(echo $DBs | perl -pe 'tr/a-z/A-Z/; s/[_-]//g;')
Libs=$(echo $Libs | perl -pe 's/\blib//g;')
TarFile=$(eval echo $TarFile)
RootDir=$(\cd $RootDir >/dev/null 2>&1; pwd)

#=======================================================================
#   Show parameters
#=======================================================================

echo "make_tarball -c $Cycle -t $TarFile -r $RootDir \\"
tmp=""
for db in $DBs
do
  tmp="${tmp}-d $db "
done
echo "             $tmp \\"
tmp=""
for lib in $Libs
do
  tmp="${tmp}-l $lib "
done
echo "             $tmp"

#=======================================================================
# Show the arch that is creating this tarball (needed for ayx/aux)
#=======================================================================

if [[ -f $RootDir/odb/scripts/test_arch ]] ; then
  target=$(/bin/ksh -e $RootDir/odb/scripts/test_arch 2>/dev/null || echo "unknown")
else
  target="unknown"
fi

if [[ $target = cygwin ]] ; then
  aux="ayx"
  ayx="ayx"
else
  aux="aux"
  ayx="ayx"
fi

#=======================================================================
# Location of automatically generated interface blocks per IFS cycle
#=======================================================================

true_cycle=$(echo $Cycle | perl -pe 'tr/A-Z/a-z/; s/^cy//; s/^(\d+)(r\d+)?.*/$1$2/;')

if [[ "$(echo $true_cycle | perl -pe 's/^.*r//')" = "0" ]] ; then
  true_cycle=$(echo $true_cycle | perl -pe 's/^(.*)r.*/$1/')
fi

export AUTO_INTFB=${AUTO_INTFB:="/vol/rdx_dir/include/$true_cycle/ifs:$RootDir/AUTO_INTFB"}

#=======================================================================
#   Check errors
#=======================================================================

[[ -d $RootDir ]] || {
  echo "***Error: RootDir=$RootDir doesn't exist" >&2
  errflg=1
}

auto_intfb=/not/available
for aidir in $(echo "$AUTO_INTFB" | perl -pe 's/:/ /g')
do
  if [[ -d $aidir ]] ; then
    auto_intfb=$aidir
    echo "***Note: Automatically generated (IFS-) interface blocks are taken from directory '$aidir'"
    break
  fi
done

if [[ ! -d $auto_intfb ]] ; then
  echo "***Error: Directory/-ies ('$AUTO_INTFB') for automatically generated interface blocks not found" >&2
  echo "          Check that your 'AUTO_INTFB' -environment variable is set correctly" >&2
  errflg=1
fi

for db in $DBs
do
  [[ -d $RootDir/odb/ddl.$db ]] || {
    echo "***Error: Database dir $RootDir/odb/ddl.$db doesn't exist" >&2
    errflg=1
  }
done

if [[ $errflg -ne 0 ]] ; then
  echo $USAGE >&2
  kill $pid
  wait
  cat $TABLE_OF_CONTENTS >/dev/tty || :
  exit 1
fi

#=======================================================================
#-- functions --
#=======================================================================

function cnt {
  if [[ $count -gt 0 ]] ; then
    echo "-- $count files"
    ((grandtot += count))
  elif [[ $# -gt 0 ]] ; then
    echo " "
  fi
  count=0
}

function tarpipe {
  [[ $# -lt 1 ]] && return
  typeset d=$(dirname $1)
  if [[ $lastdir != $d ]] ; then
    cnt
    echo "$d " | perl -pe 's/\n//'
    lastdir=$d
  fi
  $tar_create - $* | (cd $destdir; $tar_expand -) &
  typeset pid_tarpipe=$!
  typeset c=$(ls -C1 $* | egrep -v '(\.contrib|^timestamp\.x|^.*[~])' | wc -l)
  ((count += c))
  wait $pid_tarpipe
}

function perms {
  cnt 1
  if [[ $# -lt 1 ]] ; then
    echo "Changing permissions"
  else
    echo "Changing permissions for $*"
  fi
  (cd $destdir; find . -type d -print | xargs chmod ug=rwx,o=rx) &
  typeset pid_list="$!"
  if [[ $# -lt 1 ]] ; then
    (cd $destdir; find . -type f -print | xargs chmod ug+rw,o+r)
  else
    typeset d
    for d in $*
    do
      (cd $destdir/$d; find . -type f -print | xargs chmod ug+rw,o+r) &
      pid_list="$pid_list $!"
    done
  fi
  wait $pid_list
  echo "Removing the *.contrib*-files (if any)"
  (cd $destdir; find . \( -name '*.contrib*' -o -name '*~' -o -name 'timestamp.x' \) -print | xargs rm -f)
}

function select_auto_intfb {
  cd $destdir
  if [[ -d $auto_intfb ]] ; then
    typeset d=$destdir/AUTO_INTFB
    [[ -d $d ]] || mkdir -p $d || {
      echo "***Error: Unable to create auto-interface directory '$d' for export" >&2
      kill $pid
      wait
      cat $TABLE_OF_CONTENTS >/dev/tty || :
      exit 1
    }
    typeset errflg=0
    for f in $(find . -name '*.F90' -type f -print |\
               xargs -n1 egrep '^#include.*intfb\.h"' |\
               awk -F\" '{print $2}' | sort -u)
    do
      if [[ -f $auto_intfb/$f ]] ; then
        cp $auto_intfb/$f $d
        chmod u+w $d/$f
      elif [[ -f $RootDir/ifsaux/include/$f ]] ; then # this is only a temporary one
        cp $RootDir/ifsaux/include/$f $d
        chmod u+w $d/$f
      else
        echo "***Error: Unable to locate the required automatic interface file '$auto_intfb/$f'" >&2
        ((errflg+=1))
      fi
    done
    [[ $errflg -eq 0 ]] || {
      kill $pid
      wait
      cat $TABLE_OF_CONTENTS >/dev/tty || :
      exit 2
    }
  fi
}

function libifs {
  cd $RootDir
  typeset lib=libifs
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "ifs/common/*.h" \
               "ifs/module/yomdb.F90" \
               "ifs/module/yomtvrad.F90" \
               "ifs/module/parcma.F90" \
               "ifs/module/pardimo.F90" \
               "ifs/module/yomcm*.F90" \
               "ifs/module/yomcoctp.F90" \
               "ifs/module/yomct0.F90" \
               "ifs/module/yomct0b.F90" \
               "ifs/module/yomdimo.F90" \
               "ifs/module/yomlun.F90" \
               "ifs/module/yomobset*.F90" \
               "ifs/module/yomvar.F90" \
               "ifs/module/yomvnmb.F90" \
               "ifs/module/yomlim.F90" \
               "ifs/module/yomnmcod.F90" \
               "ifs/module/yomchcod.F90" \
               "ifs/module/yominstp.F90" \
               "ifs/module/yomfltxt.F90" \
               "ifs/module/*ersca.F90" \
               "ifs/module/yomchev.F90 ifs/module/yomnmev.F90" \
               "ifs/module/parssmi.F90 ifs/module/yomssmi.F90" \
               "ifs/module/partrmm.F90 ifs/module/yomtrmm.F90" \
               "ifs/module/parerr.F90 ifs/module/yomerr.F90 ifs/module/yomoerr.F90" \
               "ifs/module/parlvly.F90 ifs/module/yomlvly.F90" \
               "ifs/module/yomstre.F90" \
               "ifs/module/yomancs.F90 ifs/module/yomrstbias.F90" \
               "ifs/module/yom_ygfl.F90 ifs/module/type_gfls.F90" \
               "ifs/setup/cmoctmap.F90 ifs/setup/sucmoctp.F90 ifs/setup/suevents.F90" \
               "ifs/setup/sucma.F90 ifs/setup/sucmad1.F90 ifs/setup/sucmad1p.F90" \
               "ifs/setup/sucmad2.F90 ifs/setup/sucmaf.F90" \
               "ifs/setup/sucmahfp.F90 ifs/setup/sucmahop.F90 ifs/setup/sucmbdfp.F90 ifs/setup/sucmbdtp.F90" \
               "ifs/setup/suvnmb.F90"
  do
    tarpipe $f
  done
  perms ifs
}

function libifsaux {
  cd $RootDir
  typeset lib=libifsaux
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "ifsaux/module/distio.F90 ifsaux/module/ecsort.F90" \
               "ifsaux/module/strhandler.F90" \
               "ifsaux/module/yomerrtrap.F90 ifsaux/module/yomgstats.F90" \
               "ifsaux/include/grib_internal.h" \
               "ifsaux/include/user_clock.h" \
               "ifsaux/grib_io/*.F" \
               "ifsaux/support/abor1.F90" \
               "ifsaux/support/conv*.F90" \
               "ifsaux/support/gstats.F90" \
               "ifsaux/support/user_clock.F90" \
               "ifsaux/support/cptime.F ifsaux/support/timef.F" \
               "ifsaux/support/clock.F" \
               "ifsaux/utilities/getheapstat.F90" \
               "ifsaux/utilities/getmemstat.F90" \
               "ifsaux/utilities/getmemvals.F90" \
               "ifsaux/utilities/iusrcl.F" \
               "ifsaux/utilities/jsort.F" \
               "ifsaux/utilities/*sort*.c" \
               "ifsaux/module/parkind*.F90" \
               "ifsaux/module/sdl_module.F90" \
               "ifsaux/module/mpl_*.F90" \
               "ifsaux/module/yomlun_ifsaux.F90" \
               "ifsaux/module/yommpi.F90" \
               "ifsaux/module/yomabrt.F90" \
               "ifsaux/module/f90_unix_*.F90" \
               "ifsaux/module/ifcore.F90" \
               "ifsaux/module/ifport.F90" \
               "ifsaux/module/yomhook.F90 ifsaux/module/yomoml.F90" \
               "ifsaux/module/yomwatch.F90" \
               "ifsaux/module/mpi4to8*.F90" \
               "ifsaux/include/raise.h" \
               "ifsaux/include/drhook.h" \
               "ifsaux/include/dr_hook*.h" \
               "ifsaux/include/getstatm.h" \
               "ifsaux/include/crc.h" \
               "ifsaux/include/cargs.h" \
               "ifsaux/support/cargs.c" \
               "ifsaux/support/crc.c" \
               "ifsaux/support/endian.c" \
               "ifsaux/support/env.c" \
               "ifsaux/support/*hook*.F90 ifsaux/support/*hook*.c" \
               "ifsaux/support/coml_binding.F90" \
               "ifsaux/support/cmpl_binding.F90" \
               "ifsaux/support/mpe_locking.c" \
               "ifsaux/support/conv*.F90" \
               "ifsaux/utilities/get_thread_id.F90" \
               "ifsaux/utilities/get_max_threads.F90" \
               "ifsaux/utilities/gentrbk.F90" \
               "ifsaux/utilities/get*.c" \
               "ifsaux/utilities/linuxtrbk.c" \
               "ifsaux/utilities/addrdiff.c"
  do
    tarpipe $f
  done
  perms ifsaux
}

function libodbsqlcompiler {
  cd $RootDir
  typeset lib=libodbsqlcompiler
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/compiler/*.l" \
               "odb/compiler/*.y" \
               "odb/compiler/*.h" \
               "odb/compiler/*.c"
  do
    tarpipe $f
  done
  perms  
}

function libbl {
  cd $RootDir
  typeset lib=libbl95
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "bl/compiler/*.l" \
               "bl/compiler/*.y" \
               "bl/compiler/*.c" \
               "bl/include/*.h" \
               "bl/library/*.c" \
               "bl/library/*.F90" \
               "bl/*.b bl/*.B bl/*_part"
  do
    tarpipe $f
  done
  perms  
}

function libodb {
  cd $RootDir
  typeset lib=libodb
  echo "Creating contribution for $lib ..."
  typeset dirlink=0
  typeset rc=0
  if [[ $aux != $ayx ]] ; then
    echo "Creating temporary directory-link $ayx -> $aux ..."
    dirlink=1
    cd $RootDir/odb
    ln -s $aux $ayx || rc=$?
    cd $RootDir
  fi
  typeset f
  for f in     "odb/module/*.F90" \
               "odb/include/*.h" \
               "odb/interface/*.h" \
               "odb/lib/[a-z]*.c" \
               "odb/$ayx/[a-z]*.c" \
               "odb/lib/[a-z]*.F90" \
               "odb/$ayx/[a-z]*.F90"
  do
    tarpipe $f
  done
  perms odb
  if [[ $dirlink -eq 1 && $rc -eq 0 ]] ; then
    echo "Removing temporary directory-link $ayx -> $aux ..."
    cd $RootDir/odb
    rm -f $ayx
    cd $RootDir
  fi
}

function libodbdummy {
  cd $RootDir
  typeset lib=libodbdummy
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/lib/[A-Z]*.F90" \
               "odb/lib/[A-Z]*.c"
  do
    tarpipe $f
  done
  perms odb/lib
}

function libodbport {
  cd $RootDir
  typeset lib=libodbport
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/cma2odb/*.F90" \
               "odb/bufr2odb/*.F90" \
               "odb/preodb/."
  do
    tarpipe $f
  done
  perms odb/cma2odb odb/bufr2odb odb/preodb
}

function libodbmain {
  cd $RootDir
  typeset lib=libodbmain
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/tools/[A-Z]*.F90" \
               "odb/tools/*.c" \
               "odb/tools/*.F"
  do
    tarpipe $f
  done
  perms odb/tools
}

function libobstat {
  cd $RootDir
  typeset lib=libobstat
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     $(ls -C1 obstat/module/*.F90 | egrep -v ^obstat/module/mod_) \
               $(ls -C1 obstat/src/*.F90)
  do
    tarpipe $f
  done
  perms obstat/module obstat/src
}

function libssa {
  cd $RootDir
  typeset lib=libssa
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "ssa/*/*.h" \
               "ssa/*/*.F90"
  do
    tarpipe $f
  done
  perms ssa
}

function libmpi_serial {
  cd $RootDir
  typeset lib=libmpi_serial
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/extras/mpi_serial/*.F" \
               "odb/extras/mpi_serial/*.c"
  do
    tarpipe $f
  done
  perms odb/extras/mpi_serial
}

function libodbemos {
  cd $RootDir
  typeset lib=libodbemos
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/extras/emos/*.F" \
               "odb/extras/emos/*.c" \
               "odb/extras/emos/*.h" \
               "odb/extras/gribex/*.F" \
               "odb/extras/gribex/*.c" \
               "odb/extras/gribex/*.h"
  do
    tarpipe $f
  done
  perms odb/extras/emos odb/extras/gribex
}

function libodbec {
  cd $RootDir
  typeset lib=libodbec
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/extras/ec/*.F" \
               "odb/extras/ec/*.c" \
               "odb/extras/ec/*.h"
  do
    tarpipe $f
  done
  perms odb/extras/ec
}

function libscripts {
  cd $RootDir
  typeset lib=libscripts
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "scripts/gen/." \
               "scripts/build/." \
               "scripts/def/." \
               "scripts/sms_an/." \
               "scripts/sms_era/." \
               "scripts/era/." \
               "odb/scripts/."
  do
    tarpipe $f
  done
  perms scripts odb/scripts
}

function libddl {
  [[ $# -lt 1 ]] && return
  typeset db=$1
  cd $RootDir
  typeset lib=lib$db
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/ddl.$db/*.h" \
               "odb/ddl.$db/*.ddl" \
               "odb/ddl.$db/*.sql" \
               "odb/ddl.$db/*.flags"
  do
    tarpipe $f
  done
  if [[ $ddldir != "" ]] ; then
    tarpipe $ddldir
    ddldir=""
  fi 
  perms odb/ddl odb/ddl.$db
}

#=======================================================================
#-- end functions ---
#=======================================================================

lastdir=""
count=0
grandtot=0
tar_create_verbose="tar -c${Verbose}f"
tar_create="tar -cf"
tar_update="tar -u${Verbose}f"
tar_expand="tar -x${Verbose}f"
tar_tblcont="tar -t${Verbose}f"
ddldir="odb/ddl/."

rm -f ${TarFile}*

dir=$(dirname $TarFile)
cd $dir

subdir=$(basename $TarFile | perl -pe 's/\.[^\d+].*//')
rm -rf $subdir
mkdir $subdir

destdir=$dir/$subdir

for func in $Libs
do
  lastdir=""
  count=0
  eval lib$func || echo "***Warning: Function lib$func not defined"
done

lastdir=""
count=0
eval select_auto_intfb || :

for func in $DBs
do
  lastdir=""
  count=0
  libddl $func || :
done

cd $destdir
[[ ! -f odb/scripts/configure   ]] || {
  chmod a+rx odb/scripts/configure
  ln -s odb/scripts/configure   .
}
[[ ! -f odb/scripts/README   ]] || {
  ln -s odb/scripts/README   .
}

((grandtot += 1))
echo "Grand total : $grandtot files included in the distribution tarball"
echo "Proceeding to create tarfile=$TarFile and then gzip'ping it"
echo "*** The ODB distribution tarball creator ended on $(date)" # Not exactly true ;-)

cp $TABLE_OF_CONTENTS $destdir || :

cd $dir
tarcmd="$tar_create_verbose"
echo "$tarcmd $TarFile $subdir"
      $tarcmd $TarFile $subdir

gzip -9v $TarFile &
pid_gzip=$!
rm -rf $subdir &
pid_rm=$!

wait $pid_gzip $pid_rm

ls -l $TarFile.gz

#=======================================================================

sleep 2
kill $pid
rm -f $TABLE_OF_CONTENTS

exit 0

#=======================================================================

