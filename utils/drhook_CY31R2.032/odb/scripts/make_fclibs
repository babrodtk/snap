#!/bin/ksh
trap 'echo "Received signal, aborting ..."; wait; exit 1' 1 2 3 15
# Save current fd#1 (stdout) to #3
exec 3>&1
# Redirect globally stdout (#1) to stderr (#2)
exec 1>&2
#begin
#
# make_fclibs : A utility to generate $ODB_FCLIBS or file $ODB_SYSPATH/ODB_FCLIBS
#               for the given $ARCH to satisfy F90-linkage for odbcc & odbc++
#               when using ODB from C/C++ main-programs
#
# Warning : You may have to modify this beast for untested ARCH/compiler(s).
#           Once satisfied i.e. your odbcc/odbCC works, please let me know asap!
#
# The idea to obtain $ODB_FCLIBS is to generate list of libs (-L, -l), that would
# satisfy all F90-related externals when linking C/C++ main.
# For that purpose a test F90-program is compiled and linked and
# the -L & -l options are filtered from the output. 
# == And this is the hard part -- for now! ==
#
# Usage: make_fclibs [-a $ARCH] \
#                    -f "f90_compiler_plus_specific_flags" \
#                    -l "f90_linker_verbose_plus_other_flags" \
#                    -h (use head -1, not tail -1 for output; default for IBM's xlf90's)
#                    -t (use tail -1, not head -1 for output; this is the default)
#
# For example (the following are [being] tested):
#
# ARCH=linux with pgf90    : make_fclibs -f "pgf90 -c" -l "pgf90 -v"
#
# ARCH=rs6000 with xlf90_r : make_fclibs -f "xlf90_r -c -qextname -qsuffix=f=f90" \
#                                        -l "xlf90_r -V" \
#                                        -h 
#
# ARCH=sgimips with f90    : make_fclibs -f "f90 -c -mips4 -n32"
#
# ARCH=opteron with pathf90 : make_fclibs -f "pathf90 -c"
#
#end
#
# Author: Sami Saarinen, 13-Sep-2004
#         sami.saarinen@ecmwf.int
#
#

set +xv
set -eu

alias cd='\cd'
alias rm='\rm -f'
alias cp='\cp'
alias ln='\ln -f'

thisdir=$(\cd . >/dev/null 2>&1; echo $(pwd))
cmd=$(\cd $(dirname $0) >/dev/null 2>&1; echo $(pwd))/$(basename $0)

export ARCH=${ARCH:=unknown}
export TMPDIR=${TMPDIR:=/tmp}

FLAGS=a:f:hl:t

arch=$ARCH		# -a system_architecture (default: $ARCH)
fc=""			# -f "f90_compiler_plus_specific_flags" (default: f90)
fc_given=0		# (to record whether -f option was given)
headtail=tail		# -h  (choose head-method; "head" default for IBM)
                        # -t  (forces tail-method)
headtail_given=0	# (to record whether -h or -t are supplied at all)
ldfc=""			# -l "f90_linker_verbose_plus_other_flags" (default: $fc)

verbose="-v"		# (default linker-verbose, unless IBM's xlf)
compile="-c"		# (default "-c" for the compiler)


abort=no
while getopts ${FLAGS} i
do
  case $i in
	a)	arch="$OPTARG";;
	f)	fc="$OPTARG"; fc_given=1;;
	h)	headtail=head ; headtail_given=1;;
	l)	ldfc="$OPTARG";;
	t)	headtail=tail ; headtail_given=1;;
	*)     abort=yes; break;;
  esac
done

#-- Abort, if necessary
if [[ $abort = yes ]] ; then
  awk '/#begin/,/#end/' $cmd | egrep -v '#(begin|end)' | sed 's/^#//'
  exit 1
fi

#-- arch to lowercase
arch=$(echo "$arch" | perl -pe 'tr/A-Z/a-z/')

#-- have tested MPICH on amd64
MPICH_ROOT=${MPICH_ROOT:=/not/available}
if [[ $arch = @(amd64*) && -d $MPICH_ROOT && -x $MPICH_ROOT/bin/mpif90 ]] ; then
  arch=amd64_mpich
fi

#-- Check if fc is NOT given, then do some guess work with regard to compiler to used ...
if [[ $fc_given -eq 0 ]] ; then
  if [[ $arch = @(*g95*|cygwin) ]] ; then
    fc="g95"
  elif [[ $arch = @(linux*|ia32*) ]] ; then
    fc="pgf90 -mp -tp px"
  elif [[ $arch = @(amd64) ]] ; then
    fc="pgf90 -mp -tp amd64"
  elif [[ $arch = @(amd64_mpich) ]] ; then
    fc="$MPICH_ROOT/bin/mpif90 -f90=pgf90 -mp -tp amd64 -L$MPICH_ROOT/lib"
  elif [[ $arch = @(ia64*|altix*|ifort*|x86*) ]] ; then
    fc="ifort -openmp"
  elif [[ $arch = @(opteron*) ]] ; then
    fc=pathf90
  elif [[ $arch = @(sgi*) ]] ; then
    fc="f90 -n32"
  elif [[ $arch = @(rs6000) ]] ; then
    fc="xlf90_r -qextname -qsuffix=f=f90 -qsmp=noauto"
  elif [[ $arch = @(ibm_power*) ]] ; then
    fc="xlf90_r -qextname -qsuffix=f=f90 -qsmp=omp"
  elif [[ $arch = @(*alpha) ]] ; then
    fc="f90 -mp"
  elif [[ $arch = @(i86pc*|solaris*|sun*) ]] ; then
    fc="f90 -openmp=noopt"
  elif [[ $arch = @(necsx*) ]] ; then
    fc="sxf90 -Popenmp"
  else
   fc=f90
  fi
  fc_given=1
fi

#-- Check for IBM's xlf, in case headtail_given is still 0:
# (covers all flavors, like mpxlf90, xlf, xlf90_r, mpxlf90_r etc.)

xlf=$(echo "$fc" | awk '{print $1}' | perl -pe 's/^.*xlf.*$/xlf/;')
if [[ $headtail_given -eq 0 ]] ; then
  if [[ "$xlf" = xlf ]] ; then
    headtail=head
    headtail_given=1
  fi
fi

#-- Fix verbose for IBM's xlf

if [[ "$xlf" = xlf ]] ; then
  verbose="-V"
fi

#-- Fix verbose for NEC

if [[ $arch = @(necsx*) ]] ; then
  verbose="-verbose"
fi

#-- Check that ldfc exists
if [[ "$ldfc" = "" ]] ; then
  ldfc=$fc
fi

#-- Create dummy executable under directory $TMPDIR/dummy.$$

thisdir=$(pwd)

tmpdir=$TMPDIR/dummy.$$
mkdir -p $tmpdir
cd $tmpdir

cat > dummy.f90 <<'EOF'
program main
print *,'Hello'
end program main
EOF

libs="" # the $ODB_FCLIBS to-be

rc=0
$fc $compile dummy.f90 || rc=$?

#-- Make also sure that linking doesn't fail
if [[ $rc -eq 0 ]] ; then
  $ldfc $verbose dummy.o 2>&1 || rc=$?
fi

if [[ $rc -eq 0 ]] ; then
  in=$($ldfc $verbose dummy.o 2>&1 | egrep -v '^(export|rm|/bin/rm) ' |\
       egrep -v '(^[0-9]|ld:)' | perl -pe 's/^\s*$//' | $headtail -1 | perl -pe 's/\s*\|.*$//')

  if [[ $arch = @(i86pc*|solaris*|sun*) ]] ; then
  # Merge -Y P, temporarely into -YP,
    in=$(echo "$in" | perl -pe 's/-Y P,/-YP,/g')
  fi

  first=0
  keep=""
  for x in $in
  do
    if [[ first -eq 0 ]] ; then # command is ignored
      first=1
    else # ignore .so, .o and .la suffixes (or related, like with versions .so.10)
      this=$(echo $x | perl -pe 's/^.*\.(so|o|la).*$/OBJ/')
      if  [[ "$this" != "OBJ" ]] ; then
        keep="$keep $x"
      fi
    fi
  done

  for x in $keep
  do
    if [[ $arch = @(*alpha) ]] ; then # accept -q, too
      this=$(echo $x | perl -pe 's/^-(L|l|q).*$/LIB/')
    elif [[ $arch = @(i86pc*|solaris*|sun*) ]] ; then # accept -R, too
      this=$(echo $x | perl -pe 's/^-(L|l|R).*$/LIB/')
    else
      this=$(echo $x | perl -pe 's/^-(L|l).*$/LIB/')
    fi
    if  [[ "$this" = "LIB" ]] ; then
      libs="$libs $x"
    fi
  done

  #-- Add run-time lib stuff (ARCH-by-ARCH) into $libs
  if [[ $arch != @(*g95*|cygwin) && \
        $arch = @(linux*|opteron*|amd*|ia*|altix*|ifort*|x86*) ]] ; then # Add -Wl,-rpath=/lib/path taken from -L/lib/path
    rtlibs=$(echo $libs |\
           perl -pe 's/\s+/\n/g;' |\
           perl -pe 's/^-l.*\n//g; s/^-L(.*)/-Wl,-rpath=$1/g; s/\n/ /g')
  elif [[ $arch = @(*alpha) ]] ; then # Add -call_shared
    rtlibs="-call_shared"
  elif [[ $arch = @(i86pc*|solaris*|sun*) ]] ; then # -Y P,path1:path2:path3
    rtlibs=""
    typeset yp
    typeset rest
    if [[ $arch != @(*gcc*) ]] ; then # cc, not GNU-cc
      for x in $in
      do
        yp=$(echo "$x" | cut -c2-3)
        if [[ "$yp" = "YP" ]] ; then
          rest=$(echo "$x" | cut -c3-)
          rtlibs="$rtlibs -Y $rest"
        fi      
      done
    else # GNU-cc : transform -Y P,path1:path2:path3 into -Lpath1 -Lpath2 -Lpath3
      for x in $in
      do
        yp=$(echo "$x" | cut -c2-4)
        if [[ "$yp" = "YP," ]] ; then
          rest=$(echo "$x" | cut -c5-)
          rest=$(echo ":$rest" | perl -pe 's|:(.*?)| -L$1|g')
          rtlibs="$rtlibs $rest"
        fi      
      done
    fi
  else
    rtlibs=""
  fi
  libs="$rtlibs $libs"
fi

#-- Remove the temporary stuff
cd $thisdir
rm -rf $tmpdir

# additional libs/options here (like -lc -lm -ldl -lgen etc.)
# pre_addlibs  : add BEFORE $libs
# post_addlibs : add AFTER $libs

pre_addlibs=""
post_addlibs=""

if [[ $arch = @(*g95*|linux*|amd*|ia*|altix*|ifort*|x86*) ]] ; then
  post_addlibs=" -Wl,--allow-shlib-undefined -ldl"
elif [[ $arch = cygwin ]] ; then
  post_addlibs=" -Wl,--allow-shlib-undefined"
elif [[ $arch = @(opteron*) ]] ; then
  post_addlibs=""
elif [[ $arch = @(sgi*) ]] ; then
  pre_addlibs="-Wl,-woff,84"
  post_addlibs="-lgen"
elif [[ $arch = @(rs6000|ibm_power*) ]] ; then
  post_addlibs=""
elif [[ $arch = @(i86pc*|solaris*|sun*) ]] ; then
  pre_addlibs="-ldl"
  if [[ $arch != @(*gcc*) ]] ; then # cc, not GNU-cc
    post_addlibs="-lxnet -lsocket -lnsl"
  fi
else
  post_addlibs=""
fi


#-- Close stderr and redirect stdout (the #1) back to its original state
exec 1>&3
exec 3>&-
exec 2>&-

#-- Now, "libs" is your $ODB_FCLIBS, if all went okay (output goes to stdout-proper)
#   Before spitting this line out, remove duplicate (or more) /'s
#   and leading blanks
echo "$pre_addlibs $libs $post_addlibs" | perl -pe 's/^\s+//; s|/+|/|g;'
