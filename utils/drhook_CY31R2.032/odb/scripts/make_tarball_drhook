#!/bin/ksh
#
# A script to create a self-contained tarball of Dr.Hook (drhook*.tar.gz)
# for external distribution
#
# Author: Sami Saarinen, ECMWF, 14-Feb-2005 : Initial version derived from "make_tarball" of ODB
#                               17-Feb-2005 : cksum (crc32) and cmpl_binding added to distribution
#                               19-May-2005 : alias-defs for cd,rm,cp & ln commands added (to override users 'alias -x' defs)
#                               19-Dec-2005 : Upgraded to CY30R1
#                               19-Dec-2005 : Support for Intel tracebackqq(...) via intel_trbk() in Dr.Hook (via -DINTEL)
#                               19-Dec-2005 : Moved addrdiff.c from libifsaux to libdrhook-side
#                               04-Jan-2006 : New file endian.c assigned to libdrhook.a
#                               27-Jan-2006 : CY30R2 aware
#                               21-Feb-2006 : Fiddling with the Cycle & TarFile. sleep set from 5 to 2 secs at the end.
#                               15-Mar-2006 : Accomodating MPL_GETARG
#                               16-Mar-2006 : All MPL-codes into libdrhook.a + include mpi_serial
#                               16-Mar-2006 : The odb/tools/abor1.c will be appended to ifsaux/support/drhook.c
#                               25-Apr-2006 : Do NOT append odb/tools/abor1.c to ifsaux/support/drhook.c
#                               25-Apr-2006 : Using abor1 from ifsaux & yomlun_ifsaux
#                               25-Apr-2006 : mini-libodmain.a is created to enable sizeof.x & kind.x executables
#                               27-Apr-2006 : Added cargs.c/.h
#                               27-Apr-2006 : make_fclibs (->ODB_FCLIBS) part of the system + C-Dr.Hook program
#                               27-Apr-2006 : AUTO_INTFB environment variable (as in scripts make_tarball)
#                               28-Apr-2006 : Added linuxtrbk.c 
#                               28-Apr-2006 : Include also scripts odb/scripts/mpirun* 
#                               05-May-2006 : libodbdummy is also created
#                               06-May-2006 : AUTO_INTFB can now be a colon (:) separated path
#                               29-Jun-2006 : If $SCRATCH does not exist, it is created with 'mkdir -p'
#                               10-Jul-2006 : timestamp.x fiddle & removal of *~, too, from distribution
#                               10-Jul-2006 : Added support for BoM's mpi4to8-stuff
#                               13-Jul-2006 : Run front-end (run_fe/runfe) added
#                               07-Aug-2006 : Added John Hague's HPCE-mods + clock + cptime etc.
#                               11-Sep-2006 : Removed John Hague's HPCE-mods
#

set -eu

thisdir=$(pwd)

alias cd='\cd'
alias rm='\rm'
alias cp='\cp'
alias ls='\ls'
alias ln='\ln'
alias mv='\mv'

TABLE_OF_CONTENTS="$thisdir/../TABLE_OF_CONTENTS.drhook"
cat /dev/null > $TABLE_OF_CONTENTS
tail -f $TABLE_OF_CONTENTS &
pid=$!
exec >$TABLE_OF_CONTENTS 2>&1

echo "*** The Dr.Hook distribution tarball creator started on $(date)"

export SCRATCH=${SCRATCH:=/tmp}
[[ -d $SCRATCH ]] || mkdir -p $SCRATCH

USAGE="make_tarball_drhook [-c cycle] [-f tarfile] [-l libname] [-r rootdir]"

Cycle=CY30R2
Libs="drhook odbdummy odbmain mpi_serial scripts"
#RootDir=/ccvobs
RootDir=$(\cd ../.. >/dev/null 2>&1; pwd)
Verbose=""

cycle=""
libs=""
rootdir=""
tarfile=""
verbose=0

errflg=0
while getopts c:f:l:r:v  option
do
  case $option in
    c) cycle=$OPTARG;;
    f) tarfile=$OPTARG;;
    l) libs="$libs$OPTARG ";;
    r) rootdir=$OPTARG;;
    v) verbose=1;;
    *) errflg=1;;
  esac
done

#=======================================================================
#   Replace parameters
#=======================================================================

[[ "$cycle"   = "" ]] || Cycle=$cycle
if [[ "$tarfile" = "" ]] ; then
  TarFile=\$SCRATCH/drhook_\$Cycle.tar
else
  TarFile=$tarfile
fi
[[ "$libs"    = "" ]] || Libs=$libs
[[ "$rootdir" = "" ]] || RootDir=$rootdir
[[  $verbose -eq 0 ]] || Verbose="v"

Libs=$(echo $Libs | perl -pe 's/\blib//g;')
TarFile=$(eval echo $TarFile)
RootDir=$(\cd $RootDir >/dev/null 2>&1; pwd)

#=======================================================================
#   Show parameters
#=======================================================================

echo "make_tarball_drhook -c $Cycle -t $TarFile -r $RootDir \\"
tmp=""
for lib in $Libs
do
  tmp="${tmp}-l $lib "
done
echo "             $tmp"

#=======================================================================
# Location of automatically generated interface blocks per IFS cycle
#=======================================================================

true_cycle=$(echo $Cycle | perl -pe 'tr/A-Z/a-z/; s/^cy//; s/^(\d+)(r\d+)?.*/$1$2/;')

if [[ "$(echo $true_cycle | perl -pe 's/^.*r//')" = "0" ]] ; then
  true_cycle=$(echo $true_cycle | perl -pe 's/^(.*)r.*/$1/')
fi

export AUTO_INTFB=${AUTO_INTFB:="/vol/rdx_dir/include/$true_cycle/ifs:$RootDir/AUTO_INTFB"}

#=======================================================================
#   Check errors
#=======================================================================

[[ -d $RootDir ]] || {
  echo "***Error: RootDir=$RootDir doesn't exist" >&2
  errflg=1
}

auto_intfb=/not/available
for aidir in $(echo "$AUTO_INTFB" | perl -pe 's/:/ /g')
do
  if [[ -d $aidir ]] ; then
    auto_intfb=$aidir
    echo "***Note: Automatically generated (IFS-) interface blocks are taken from directory '$aidir'"
    break
  fi
done

if [[ ! -d $auto_intfb ]] ; then
  echo "***Warning: Directory/-ies ('$AUTO_INTFB') for automatically generated interface blocks not found" >&2
  echo "            Check that your 'AUTO_INTFB' -environment variable is set correctly" >&2
  # errflg=1 (currently not flagged as error, since Dr.Hook doesn't need automatique interface blks)
fi

if [[ $errflg -ne 0 ]] ; then
  echo $USAGE >&2
  kill $pid
  wait
  cat $TABLE_OF_CONTENTS >/dev/tty || :
  exit 1
fi

#=======================================================================
#-- functions --
#=======================================================================

function cnt {
  if [[ $count -gt 0 ]] ; then
    echo "-- $count files"
    ((grandtot += count))
  elif [[ $# -gt 0 ]] ; then
    echo " "
  fi
  count=0
}

function tarpipe {
  [[ $# -lt 1 ]] && return
  typeset d=$(dirname $1)
  if [[ $lastdir != $d ]] ; then
    cnt
    echo "$d " | perl -pe 's/\n//'
    lastdir=$d
  fi
  $tar_create - $* | (cd $destdir; $tar_expand -) &
  typeset pid_tarpipe=$!
  typeset c=$(ls -C1 $* | egrep -v '(\.contrib|^timestamp\.x|^.*[~])' | wc -l)
  ((count += c))
  wait $pid_tarpipe
}

function perms {
  cnt 1
  if [[ $# -lt 1 ]] ; then
    echo "Changing permissions"
  else
    echo "Changing permissions for $*"
  fi
  (cd $destdir; find . -type d -print | xargs chmod ug=rwx,o=rx) &
  typeset pid_list="$!"
  if [[ $# -lt 1 ]] ; then
    (cd $destdir; find . -type f -print | xargs chmod ug+rw,o+r)
  else
    typeset d
    for d in $*
    do
      (cd $destdir/$d; find . -type f -print | xargs chmod ug+rw,o+r) &
      pid_list="$pid_list $!"
    done
  fi
  wait $pid_list
  echo "Removing the *.contrib*-files (if any)"
  (cd $destdir; find . \( -name '*.contrib*' -o -name '*~' -o -name 'timestamp.x' \) -print | xargs rm -f)
}

function libodbdummy {
  cd $RootDir
  typeset lib=libodbdummy
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/lib/Dummies.c"
  do
    tarpipe $f
  done
  perms odb/lib
}

function libdrhook {
  cd $RootDir
  typeset lib=libdrhook
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "ifsaux/module/parkind*.F90" \
               "ifsaux/module/sdl_module.F90" \
               "ifsaux/module/mpl_*.F90" \
               "ifsaux/module/yomlun_ifsaux.F90" \
               "ifsaux/module/yommpi.F90" \
               "ifsaux/module/yomabrt.F90" \
               "ifsaux/module/f90_unix_*.F90" \
               "ifsaux/module/ifcore.F90" \
               "ifsaux/module/ifport.F90" \
               "ifsaux/module/yomhook.F90 ifsaux/module/yomoml.F90" \
               "ifsaux/module/yomwatch.F90" \
               "ifsaux/module/mpi4to8*.F90" \
               "ifsaux/include/raise.h" \
               "ifsaux/include/drhook.h" \
               "ifsaux/include/dr_hook*.h" \
               "ifsaux/include/getstatm.h" \
               "ifsaux/include/crc.h" \
               "ifsaux/include/cargs.h" \
               "ifsaux/support/cargs.c" \
               "ifsaux/support/crc.c" \
               "ifsaux/support/endian.c" \
               "ifsaux/support/env.c" \
               "ifsaux/support/*hook*.F90 ifsaux/support/*hook*.c" \
               "ifsaux/support/abor1.F90" \
               "ifsaux/support/coml_binding.F90" \
               "ifsaux/support/cmpl_binding.F90" \
               "ifsaux/support/mpe_locking.c" \
               "ifsaux/support/conv*.F90" \
               "ifsaux/support/cptime.F ifsaux/support/timef.F" \
               "ifsaux/support/clock.F" \
               "ifsaux/utilities/get_thread_id.F90" \
               "ifsaux/utilities/get_max_threads.F90" \
               "ifsaux/utilities/gentrbk.F90" \
               "ifsaux/utilities/get*.c" \
               "ifsaux/utilities/linuxtrbk.c" \
               "ifsaux/utilities/addrdiff.c"
  do
    tarpipe $f
  done
  perms ifsaux
}

function libmpi_serial {
  cd $RootDir
  typeset lib=libmpi_serial
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/extras/mpi_serial/*.F" \
               "odb/extras/mpi_serial/*.c"
  do
    tarpipe $f
  done
  perms odb/extras/mpi_serial
}

function libodbmain {
  cd $RootDir
  typeset lib=libodbmain
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/tools/Kind.F90" \
               "odb/tools/sizeof.c"
  do
    tarpipe $f
  done
  perms odb/tools
}

function libscripts {
  cd $RootDir
  typeset lib=libscripts
  echo "Creating contribution for $lib ..."
  typeset f
  for f in     "odb/scripts/makefile" \
               "odb/scripts/make_*" \
               "odb/scripts/make.*" \
               "odb/scripts/make_fclibs" \
               "odb/scripts/README_drhook" \
               "odb/scripts/configure_drhook" \
               "odb/scripts/sfmakedepend" \
               "odb/scripts/drhook_ex*" \
               "odb/scripts/insert_drhook*" \
               "odb/scripts/Fortran90_stuff.pm" \
               "odb/scripts/mgrep" \
               "odb/scripts/mpif.*" \
               "odb/scripts/F90hppa" \
               "odb/scripts/get_cycle" \
               "odb/scripts/test_arch" \
               "odb/scripts/xlf_omp" \
               "odb/scripts/F90hppa" \
               "odb/scripts/mpirun*" \
               "odb/scripts/notimestamp.x" \
               "odb/scripts/timestamp.c" \
               "odb/scripts/parse_log.pl" \
               "odb/scripts/run*fe" \
               "odb/lib/version.c"
  do
    tarpipe $f
  done
  perms odb/scripts odb/lib
}

#=======================================================================
#-- end functions ---
#=======================================================================

lastdir=""
count=0
grandtot=0
tar_create_verbose="tar -c${Verbose}f"
tar_create="tar -cf"
tar_update="tar -u${Verbose}f"
tar_expand="tar -x${Verbose}f"
tar_tblcont="tar -t${Verbose}f"

rm -f ${TarFile}*

dir=$(dirname $TarFile)
cd $dir

subdir=$(basename $TarFile | perl -pe 's/\.[^\d+].*//')
rm -rf $subdir
mkdir $subdir

destdir=$dir/$subdir

for func in $Libs
do
  lastdir=""
  count=0
  eval lib$func || echo "***Warning: Function lib$func not defined"
done

cd $destdir
if [[ -f odb/scripts/configure_drhook   ]] ; then
  chmod a+rx odb/scripts/configure_drhook
  ln -s odb/scripts/configure_drhook configure
fi
if [[ -f odb/scripts/README_drhook   ]] ; then
  ln -s odb/scripts/README_drhook README
fi
for f in odb/scripts/drhook_ex*
do
  ln -s $f .
done
if [[ -f drhook_ex.ksh ]] ; then
  chmod u+x drhook_ex.ksh
fi

((grandtot += 1)) # Account for the $TABLE_OF_CONTENTS -file
echo "Grand total : $grandtot files included in the distribution tarball"
echo "Proceeding to create tarfile=$TarFile and then gzip'ping it"
echo "*** The Dr.Hook distribution tarball creator ended on $(date)" # Not exactly true ;-)

cp $TABLE_OF_CONTENTS $destdir || :

cd $dir
tarcmd="$tar_create_verbose"
echo "$tarcmd $TarFile $subdir"
      $tarcmd $TarFile $subdir

gzip -9v $TarFile &
pid_gzip=$!
rm -rf $subdir &
pid_rm=$!

wait $pid_gzip $pid_rm

ls -l $TarFile.gz

#=======================================================================

sleep 2
kill $pid
rm -f $TABLE_OF_CONTENTS

exit 0

#=======================================================================

